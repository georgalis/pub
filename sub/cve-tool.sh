#!/bin/sh

set -e

_main () {
    dir=/usr/local/data/cve-tool
    local verb="chkwrn"
    local verb="devnul"
    # maybe add option to skip cksum? however cve_brief is the slow one
    local urlbase='https://nvd.nist.gov/feeds/json/cve/1.1'
    env_qual # runtime qualify
    mkdir -p "$dir" || chkerr "cannot make data directory : 5dc798bc"
    cd "$dir" || chkerr "cannot enter data directory : 5dc798e9"
    [ "$1" ] || get_nvdcve # no args? download entire db
    [ "$1" ] && chk_nvdcve $@ # downloads needful meta and json
    [ "$1" ] && cve_brief $@ # parse nvd for bbrief cve report
    [ "$verb" = "devnul" ] || post_report
    } # _main

devnul () { true ;} # return args to stderr
stderr () { echo "$*" 1>&2 ;} # return args to stderr
chkerr () { [ "$*" ] && { stderr ">>> $* <<<" ; return 1 ;} || true ;} #:> if args not null, err stderr args return 1
chkwrn () { [ "$*" ] && { stderr "^^ $* ^^" ; return 0 ;} || true ;} #:> if args not null, wrn stderr args return 0

get_nvdcve () { # refresh each old meta file, download gz iff cksum diff
    local meta_f nvd_f ver year=$(date +%Y)
   for ver in recent modified $(seq 2002 "$year") ; do
        meta_f="nvdcve-1.1-${ver}.meta"
         nvd_f="nvdcve-1.1-${ver}.json.gz"
        $verb "$meta_f"
        find ./ -regex "^./${meta_f}$" -mmin -120 >/dev/null || ftp -4V "${urlbase}/${meta_f}" # get if meta old
        $verb "$nvd_f"
        [ -e "${nvd_f}" ] || ftp -4V "${urlbase}/${nvd_f}"
        expr "$(sed -e '/^gzSize:/!d' -e 's/.*://' "$meta_f")" : "$(stat -f "%z" "$nvd_f")" >/dev/null \
            || ftp -4V "${urlbase}/${nvd_f}" # get data if meta diff size XXX check sha256
        done
    return 0
    } # get_nvdcve

chk_nvdcve () { # identify extract and cksum approprate CVE json 
    [ "$1" ] || chkerr "Specify CVE as arg(s) eg CVE-1234-1234 ... : 5dc72f67"
    local ver cve="$1"
    ver="$(echo "$cve" | sed -e 's/^CVE-//' -e 's/-.*//')"
    meta_f="nvdcve-1.1-${ver}.meta"
    json_f="nvdcve-1.1-${ver}.json"
    $verb "$cve $meta_f $json_f"
    [ -e "$meta_f" ] || ftp -4V "${urlbase}/${meta_f}" # get if meta missing
    find ./ -regex "^./${meta_f}$" -mmin -120 >/dev/null || ftp -4V "${urlbase}/${meta_f}" # get if meta old
    [ -e "${json_f}.gz" ] || ftp -4V "${urlbase}/${json_f}.gz" # get json.gz if gz missing
    grep -q '^gzSize:' "$meta_f" || chkerr "Invalid $meta_f : 5dc7805e"
    expr "$(sed -e '/^gzSize:/!d' -e 's/.*://' "$meta_f")" : "$(stat -f "%z" "${json_f}.gz")" >/dev/null \
        || { ftp -4V "${urlbase}/${json_f}.gz" # get data if meta size diff
           gzcat "${json_f}.gz" >"$json_f" ; touch "$json_f" ;}
    grep -q '^sha256:' "$meta_f" || chkerr "Invalid $meta_f : 5dc78073"
    [ -e "$json_f" ] || gzcat "${json_f}.gz" >"$json_f" ; touch "$json_f"
    expr "$(sed -e '/^sha256:/!d' -e 's/.*://' "$meta_f" | tr "[:upper:]" "[:lower:]" )" \
        : "$(cksum -qa sha256 "$json_f" )" >/dev/null \
        || { gzcat "${json_f}.gz" >"$json_f" ; touch "$json_f"
    expr "$(sed -e '/^sha256:/!d' -e 's/.*://' "$meta_f" | tr "[:upper:]" "[:lower:]" )" \
        : "$(cksum -qa sha256 "$json_f")" >/dev/null \
        || chkerr "Invalid chksum $json_f $meta_f" ;}
    shift
    $verb "shift chk_nvdcve $@ : 5dc78815"
    [ "$1" ] && chk_nvdcve $@ || true
    } # chk_nvdcve 

cve_brief () {
    [ "$1" ] || chkerr "Specify CVE as arg(s) eg CVE-1234-1234 ... : 5dc7365c"
    local ver cve="$1"
    ver="$(echo "$cve" | sed -e 's/^CVE-//' -e 's/-.*//')"
    meta_f="nvdcve-1.1-${ver}.meta"
     nvd_j="nvdcve-1.1-${ver}.json"
    # cf [lloyd/yajl] alternate json parser
    # improve performance by joining needful json stream and selecting all cve in one pass
    cat "$nvd_j" \
      | jq '.CVE_Items[] | select (.cve.CVE_data_meta.ID == ("'$cve'"))
            |   .cve.CVE_data_meta.ID ,
                .cve.description.description_data[].value ,
              { vector:  .impact.baseMetricV3.cvssV3.attackVector ,
                complexity: .impact.baseMetricV3.cvssV3.attackComplexity ,
                provilege: .impact.baseMetricV3.cvssV3.privilegesRequired ,
              } ,
                .impact.baseMetricV3.cvssV3.vectorString ,
                .cve.references.reference_data[]?.url
        ' | sed -e '/^[{}]$/d' 
    echo
    shift
    [ "$1" ] && cve_brief $@ || true
    } # cve_brief

env_qual () { # runtime qualification
    touch nulltime ; sleep 1
    expr "$(uname)" : "NetBSD" >/dev/null || chkerr "Only tested on NetBSD : 5dc7129a" 
    [ -x "$(which jq)" ] || chkerr "jq not found : 5dc71ad8"
    } # env_qual

post_report () {
    local a
    find . -type f \! -anewer nulltime \! -name nulltime \
        | sort \
        | while IFS= read a; do echo "unused $a" ; done
    } # post_report

 # # for ./cve-tool.sh create and use directory ./cve-tool
 # cd "$(dirname "$0")"
 # mkdir -p "$(basename "$0" | sed 's/\..*//')"
 #       cd "$(basename "$0" | sed 's/\..*//')"
_main $@
exit


