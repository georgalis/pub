#!/bin/bash

# kdb MVP 5d03eb zerays

# %20150807 the only epoch ever used for intervals

# Copyright (C) 2015-2019 George Georgalis <george@galis.org>
# All rights reserved. No use or redistribution allowed.
#
# Including but not limited to algorithms, format, procedures and
# data process function(s). Managed data remains under respective
# copyright of the owners.
#
# Licensing: https://ko-fi.com/dot4space
# Questions: George Georgalis <george@galis.org>


K4l () 
{ 
    local k4="$1";
    [ -e "$k4" ] || { 
        chkerr "$FUNCNAME k4='$k4' does not exist (bfbe4dd)";
        return 1
    };
    awk 'NR==1,/^%kz/' < "$k4" | sed -e '/^%km\ /!d' -e 's/^%km\ //' -e 's/_/ /g' | awk '{print "%kl",$2,$3}' | tr '\n' ' ';
    sed -e '/^%ks\ /!d' < "$k4"
}
Krst () 
{ 
    k4db_showpool | wc -l;
    find "$k4db/$k4_pool/ptrnx" -delete;
    find "$k4db/$k4_pool/ptrid" -delete;
    find "$k4db/$k4_pool/uidln" -delete;
    k4db_showpool | wc -l
}
Kxl () 
{ 
    local arg1="$1" k4;
    [ "$arg1" ] && { 
        set $(k4_inptr "$arg1") && K4l "$1" || chkerr "$FUNCNAME invalid something arg1='$arg1' k4='$1' (bfbe236)" || return 1
    };
    [ "$arg1" ] || find "$k4db/$k4_pool/uidln" -regex '.*/uidln/[[:xdigit:]]\{16\}$' | while read k4; do
        K4l "$k4";
    done
}
arpa () 
{ 
    [ -z "$1" ] && echo -n "An ip address on the command line returns its ";
    echo "$(ptr "$1")in-addr.arpa"
}
chkerr () 
{ 
    [ "$*" ] && { 
        logerr "$*";
        stderr "$*";
        return 1
    } || true
}
chkwrn () 
{ 
    [ "$*" ] && { 
        logwrn "$*";
        stdwrn "$*";
        return 0
    } || true
}
ecc () 
{ 
    echo "$2" | cut -c "$1" | sed 's/\^.*//g'
}
ecp () 
{ 
    echo "$2" | cut -d '^' -f "$1" | sed 's/\^.*//g'
}
idktjz () 
{ 
    chkwrn "Function works but revisit procedure... noop";
    return 1;
    find -d "$1" -maxdepth 0 -type d || { 
        chkwrn "$0 : Not directory : $1";
        return $?
    };
    find -d "$1" -maxdepth 1 -mindepth 1 -name 40000000 || { 
        chkwrn "$0 : Not exist $1/40000000";
        return $?
    };
    find -d "$1" -type d -empty -delete;
    find -d "$1" -mindepth 1 -type f | tar cjf "$1"/0x40m.tjf -T - && find -d "$1" -mindepth 1 -type f -not -name 0x40m.tjf -not -name 40000000 -delete;
    find -d "$1" -mindepth 1 -type d -empty -delete;
    head "$1"/40000000 >> "$1"/40000000;
    echo "$1"/0x40m.tjf >> "$1"/40000000;
    tar tjf "$1"/0x40m.tjf >> "$1"/40000000
}
k () 
{ 
    $k4db_logstd "start $$ : since='$since' $FUNCNAME $*";
    local ptrnxd="$k4db/$k4_pool/ptrnx";
    set $(k4_inptr "$1") || chkerr "$FUNCNAME : error k4_inptr arg1='$1' (bfd7c86)" || return 1;
    k4="$1";
    nx="$2";
    [ -e "$k4" ] || chkerr "$FUNCNAME : invalid k4='$k4' (bcf678a)" || return 1;
    $EDITOR "$k4";
    k4db_mknxk4 "0" "$k4";
    k4db_mknxk4 "$nx" "$k4";
    [ -e "${k4},v" ] || ci -m"(by $FUNCNAME)" -l -t-kdb -q "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"(by $FUNCNAME)" -l -q "$k4";
    k4_post "$k4";
    $k4db_logstd "end $$ : since='$since' $FUNCNAME $*"
}
k4_head_disp () 
{ 
    $k4db_logstd "start $$ : $FUNCNAME $*";
    set $(k4_inptr "$1");
    [ -e "$1" ] || chkerr "$FUNCNAME : invalid ptr k4='$1' (c0c42d73)" || return 1;
    awk 'NR==1,/^%kz/' "$1";
    $k4db_logstd "end $$ : $FUNCNAME $*"
}
k4_help () 
{ 
    cat  <<EOF
Nomenclature:
 k{name}     user shell function
 k4_{name}   function on elements
 k4db_{name} function on entire db

${FUNCNAME}_1 : Major commands
${FUNCNAME}_2 : Primitive functions
${FUNCNAME}_3 : Unit operations
${FUNCNAME}_4 : Development
${FUNCNAME}_5 : Environment
${FUNCNAME}_6 : GLOSSARY
${FUNCNAME}_7 : PATHs
${FUNCNAME}_8 : K4 file format
${FUNCNAME}_9 : All of the above
EOF

}
k4_help_1 () 
{ 
    local c;
    cat  <<EOF
	= Major commands (#:o)
$(c='#:o' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" | sed -e "s/ ().*$c/	:/"   -e "s/$c/ :/")
EOF

}
k4_help_2 () 
{ 
    local c;
    cat  <<EOF
	= Primitive functions (#::)
$(c='#::' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" | sed -e "s/ ().*$c/	:/"   -e "s/$c/ :/")
EOF

}
k4_help_3 () 
{ 
    local c;
    cat  <<EOF
	= Unit operations (#:>)
$(c='#:>' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" | sed -e "s/ ().*$c/	:/"   -e "s/$c/ :/")
EOF

}
k4_help_4 () 
{ 
    local c;
    cat  <<EOF
	= Development (#:-)
$(c='#:-' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" | sed -e "s/ ().*$c/	:/"   -e "s/$c/ :/")
EOF

}
k4_help_5 () 
{ 
    local c;
    cat  <<EOF
	= Environment
$(export c='#:$' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" )
$(grep ^export "$k4db_fun")
EOF

}
k4_help_5 () 
{ 
    local c;
    cat  <<EOF
	= Environment
$(export c='#:$' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" )
$(grep ^export "$k4db_fun")
EOF

}
k4_help_6 () 
{ 
    cat  <<EOF
	= GLOSSARY
 k4    kdb file and/or path
 k4db  set of k4
 c     query k4db records
 k     act on specific c result
EOF

}
k4_help_7 () 
{ 
    cat  <<EOF
	= PATHs
 \$k4db/3/c/1/ cumulative logs and ptr
 \$k4db/3/c/2/ performance indices

 \$k4db/3/c/0/ptrid/\$uid
	= FILEPATHs

   local k4d_pool="$k4_pool/$(k4epoch)"
   # mkdir -p pool query directory
    # qury 0
    # root  dot4
    # pool  ${root}/3/c/0/...
    # qury  ${root}/0/xsss^/ ${epoch}${span}^
    # ddir  ${root}/${epoch}${span}^
    # k4    ${root}/${epoch}${span}^/_${epoch}.kdb
    # link  ${root}/${epoch}${span}^/^/_${epoch}${span}.kdb
 \$k4db/0/5/c11d 5 5c11d ropr c11d # k4epoch | k4d dot4/0
 \$k4db/3/c/: misc tmp files
X\$k4db/3/c/0/{ep}/0.log: primary search log
X\$k4db/3/c/0/{ep}/1.cmd: invocation command
 \$k4db/3/c/0/uidln/\$uid : uid ([:xdigit:]]\{16\}) named link to k4 file
 \$k4db/3/c/0/ptrid/\$uid : ptr data (2 lines: k4 path and uid) of k4 uid ([:xdigit:]]\{16\})
 \$k4db/3/c/0/ptrnx/\$nx : 0x numbered link to ptrid/\$uid
 \$k4db/3/c/0/tx.\$FUNCNAME}.0 : benchmark start time
 \$k4db/3/c/0/tx.\$FUNCNAME}.1 : benchmark stop time
X\$k4db/3/c/0/{ep}/xss/'[[:xdigit:]]\{24\}$': primary search result (^k4 %k*)
 \$k4db/3/c/1/\$(date "+%Y%m%d")/ptrid/: ptrid for abandoned results
 \$k4db/3/c/1/xss/{xss}: secondary search result {xss} link to 3/c/0/*/xss/[[:xdigit:]]\{24\} (^k4 %k*)
X\$k4db/3/c/1/{kx}/{xss}: secondary search, xss links to 3/c/0/*/xss/[[:xdigit:]]\{24\} (^k4 %ks %kx)
 \$k4db/3/c/1/secondary.log: secondary search log
 \$k4db/4/: display search index, epoch bundle (local cache)
 \$k4db/4/0/0: last (^k4 %ks %kx)
 \$k4db/4/0/1: prior (^k4 %ks %kx)
 \$k4db/4/0/2: prior (^k4 %ks %kx)
 \$k4db/4/0/3: prior (^k4 %ks %kx)
 \$k4db/4/0/4: prior (^k4 %ks %kx)
 \$k4db/4/0/5: prior (^k4 %ks %kx)
 \$k4db/4/0/6: prior (^k4 %ks %kx)
 \$k4db/4/0/7: prior (^k4 %ks %kx)
?\$k4db/4/0/{epoch}: cumulative prior display, expires (^k4 %ks %kx)
 \$k4db/4/{epoch}/xss/{xss}: layer {epoch} search files, cumulative log, from 3/c/1/* on epoch reset
 \$k4db/4/{epoch}/nx/{nx}: layer {epoch} search files, cumulative log, from 3/c/1/* on epoch reset
X\$k4db/4/{epoch}/kx/{kx}: layer {epoch} search files, cumulative log, from 3/c/1/* on epoch reset
 \$k4db/4/{epoch}/0.log: cumulative log, from 3/c/1/secondary.log on epoch reset
 \$k4db/5/: kdb master (best available)
 \$k4db/6
 \$k4db/tag.tbl
 \$k4db/include-bash
 \$k4db/.git
 \$k4db/design
 \$k4db/dev
 \$k4db/bin
 \$k4db/man
 \$k4db/   ./4/{tag} : list of dot3
 \$k4db/   ./3/{[:xdigit:]*/}/ : cache index of
EOF

}
k4_help_8 () 
{ 
    grep '^	' "$k4db_fun";
    cat  <<'EOF'
EOF

}
k4_help_9 () 
{ 
    k4_help_1;
    echo;
    k4_help_2;
    echo;
    k4_help_3;
    echo;
    k4_help_4;
    echo;
    k4_help_5;
    echo;
    k4_help_6;
    echo;
    k4_help_7;
    echo;
    k4_help_8
}
k4_inptr () 
{ 
    $k4db_logstd "start $$ : $FUNCNAME $*";
    local ptr="$1" ptrf k4 id nx;
    local ptrid="$k4db/$k4_pool/ptrid";
    local ptrnx="$k4db/$k4_pool/ptrnx";
    [ "$ptr" ] || ptr=0;
    [ "$ptrf" ] || ptrf="$( find "$ptrnx" -name "${ptr}"  -regex ".*/ptrnx/[[:xdigit:]]*$" )";
    [ "$ptrf" ] || ptrf="$( find "$ptrid" -name "${ptr}"  -regex ".*/ptrid/[[:xdigit:]]\{16\}$" )";
    [ "$ptrf" ] || ptrf="$( find "$ptrid" -name "${ptr}*" -regex ".*/ptrid/${ptr}[[:xdigit:]]\{8\}$" )";
    [ "$ptrf" ] || ptrf="$(ls -r "$ptrnx"/* | head -n1)";
    [ "$ptrf" ] || chkerr "$FUNCNAME : no match for ${ptr} : $ptrid $ptrnx : (bcfce6d)" || return 1;
    [ "$(echo "$ptrf" | awk 'END{print NR}')" = 1 ] || chkwrn "$FUNCNAME : multi match for ptr='${ptr}' $FUNCNAME bug (bcf6458)";
    [ "$ptrf" ] && k4="$(head -n1 "$ptrf")";
    [ "$ptrf" ] && id="$(tail -n1 "$ptrf")";
    [ "$ptrf" ] && nxp="$(find "$ptrnx" -type f -exec grep --files-with-matches "$id" \{\} \; | awk 'NR==1' )";
    echo $k4 $id ${nxp##*/};
    $k4db_logstd "end $$ : $FUNCNAME $*"
}
k4_mkindex () 
{ 
    $k4db_logstd "start $$ : $FUNCNAME $*";
    local k4="$1" p="${1%/*}" k="${1##*/}";
    local dt idxdt;
    mkdir -p "$p/^";
    k4db_headx '.' "$k4" | awk '{printf "%02x-%s\n",NR,$0}' | while read dt; do
        idxdt="$(k4db_idx_dt "$dt")";
        echo "$idxdt";
        echo;
    done;
    echo $k4;
    echo $p;
    echo $k
}
k4_post () 
{ 
    $k4db_logstd "start $$ : $FUNCNAME $*";
    local k4="$1" p="$(dirname "$1")" k="$(basename "$1")";
    local not_find="-not -name *,v -not -name $k -not -path *^/^/* -not -name ^ ";
    local not_find="-not ( -name *,v -o -name $k -o -path *^/^/* -o -name ^ )";
    local not_find="-not ( -name *,v -o -name $k -o -name ^ )";
    k4kl "$k4" > "$k4db/$k4_env/kl";
    k4kc "$k4" > "$k4db/$k4_env/kc";
    k4db_headx "${k4_view}" "$k4";
    find "$p" -prune -type f -name "$k" -exec printf "        K4 " \; -print;
    find "$p" -mindepth 1 -prune -type d $not_find -exec printf "       DIR " \; -print | sort -d;
    find "$p" -mindepth 1 -prune -type f $not_find -exec printf "      FILE " \; -print | sort -d;
    find "$p" -mindepth 1 -prune -type f $not_find | awk 'END{ if (FNR > 10 ) printf "% 10s","MORE" ; else printf "% 10s","TOTAL" }';
    find "$p" -mindepth 1 -prune -type f $not_find | awk 'END{printf " (%d/",FNR}';
    find "$p" -type f $not_find | awk 'END{printf "%d)",FNR}';
    du -sh "$p/";
    $k4db_logstd "end $$ : $FUNCNAME $*"
}
k4_raw () 
{ 
    sed -e 's/^%[^ ]* //' -e 's/#.*//' -e 's/ $//'
}
k4_squeeze () 
{ 
    tr -s '\n\t' ' '
}
k4_wrapregex () 
{ 
    local m="$1";
    local n="$2";
    [ "$m" ] || return 0;
    [ "$n" ] && { 
        shift;
        shift;
        $FUNCNAME "$m|$n" $@
    } || echo "($m)"
}
k4d () 
{ 
    local prefix="$1";
    [ -d "$prefix" -a -w "$prefix" ] || { 
        chkerr "prefix=$prefix not a writeable directory.";
        return 1
    };
    shift;
    local pass="$*";
    local orig="$(tr '\n' ' ' | k4db_clean_name )";
    local seed="/$orig";
    while [ -d "$(dirname "$prefix$seed")" ]; do
        seed="$(echo "$seed" | sed -e 's:.*/.:&/:' -e 's://$:/0:' )";
    done;
    local k4d="${prefix}${seed}";
    local k4e="$(echo $seed | sed -e 's;/[^/]*$;;' -e 's;/;;g')";
    local k4l="$(echo $orig | sed -e 's/[[:xdigit:]]\{8\}/& /' )";
    local k4i="$(echo $seed | sed -e 's;.*/;;' -e 's/[[:xdigit:]]\{8\}$/_&/' )";
    local gpw="$( gpw 1 $(( ${#k4e} * ${#k4e} / 18 + 4 )) | awk '{printf "%8s",$1}' | sed 's/ /V/g' )";
    echo $k4d $gpw $k4l $k4e $k4i $pass
}
k4db_clean () 
{ 
    k4db_valid_cmd;
    find "$k4db" -depth -type d -empty -delete
}
k4db_clean_ks () 
{ 
    chkerr "$FUNCNAME empty";
    return 1
}
k4db_clean_name () 
{ 
    tr -dc '\053-\071\101-\132\137\141-\172'
}
k4db_clean_path () 
{ 
    chkerr "$FUNCNAME empty";
    return 1
}
k4db_clean_xs () 
{ 
    chkerr "$FUNCNAME empty";
    return 1
}
k4db_clean_xss () 
{ 
    chkerr "$FUNCNAME empty";
    return 1
}
k4db_fk4 () 
{ 
    $k4db_logstd "find ${k4db} ${since} -regex '.*_/.*' -prune -type f -name '*.kdb'";
    find ${k4db} ${since} -regex '.*_/.*' -prune -type f -name '*.kdb';
    $k4db_logstd "find ${k4db} ${since} -regex '.*^/.*' -prune -type f -name '*.kdb'";
    find ${k4db} ${since} -regex '.*^/.*' -prune -type f -name '*.kdb'
}
k4db_fold () 
{ 
    [ -t 1 ] && { 
        local cols="$(tput cols)";
        fold -s -w $cols
    } || cat
}
k4db_headx () 
{ 
    local k4 ex="$1" k4s="$2";
    [ "$k4s" ] || k4s="$(cat)";
    echo "$k4s" | while read k4; do
        awk 'NR==1,/^$/' "$k4" | grep -E "$ex";
    done
}
k4db_headx_filter () 
{ 
    sed -E -e '
        /^%kt $/d
        /^%kj motive$/d
        /^%k(l|r|p)_(%kl )5.* isbe #/d
        /^%k(l|r|p)_(%kl )5.* self #/d
        /^%k(l|r|p)_(%kl )5.* self [ ]*# (super|related)/d
        /^%k(l|r|p)_5.* self [ ]*# (super|related|linked)/d
        /^%kd_.*index.md$/d
        '
}
k4db_hl () 
{ 
    local char="$1";
    [ "$char" ] || char="-";
    [ -t 1 ] && { 
        local cols=$(tput cols);
        tput md;
        printf "%*s" $cols '' | tr ' ' "$char";
        tput me
    } || echo "$char"
}
k4db_idx_dt () 
{ 
    local arg1="$1";
    [ "$arg1" ] || arg1="$(cat)";
    tr -dc ' %+,-.0123456789:;@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_abcdefghijklmnopqrstuvwxyz' | tr -s ' '
}
k4db_init () 
{ 
    local cksum fail="fail";
    local h="$(cd ~ && pwd -P)";
    [ "$k4db" = "$h/dot4" ] || { 
        chkerr "$FUNCNAME : unexpected k4db : $k4db : bc11a92";
        fail="${fail} bc11a92";
        return 1
    };
    export k4="$k4db/0.kdb";
    export LC_ALL="C";
    export k4_pool="3/c/0";
    export k4_hist="3/c/2";
    export k4_env="3/c/f";
    export k4db_tags="$k4db/c/etc/tags.tbl";
    export k4db_ntag="$k4db/c/etc/ntag.tbl";
    export k4db_logstd="true #";
    export k4db_logstd="k4db_logstd";
    export k4_unlong='k4db_fold';
    export k4_unlong='k4db_trunc';
    export case='-i';
    export k4_search='^%k(s|j|t|d|l|r|p|n|m)\ ';
    export k4_view='^%k(s|j|t|d|l|r|p|m)\ ';
    export k4_topic='^%k(s|t|j|l|r|p)\ ';
    mkdir -p "$k4db/$k4_pool" "$k4db/$k4_hist" "$k4db/$k4_env" || { 
        chkerr "cannot create k4db/k4_pool ($k4db/$k4_pool) k4db/k4_hist ($k4db/$k4_hist) k4db/k4_env ($k4db/$k4_env) : bc3fee0";
        fail="${fail} bc3fee0"
    };
    mkdir -p "$k4db/$k4_pool/ptrnx" "$k4db/$k4_pool/ptrid" "$k4db/$k4_pool/uidln" || { 
        chkerr "cannot create k4db/k4_pool/ptrnx k4db/k4_pool/ptrid k4db/k4_pool/uidln ($k4db/$k4_pool) : bc3fef1";
        fail="${fail} bc3fef1"
    };
    touch -t 201508060000 "$k4db/$k4_pool/nulltime" || { 
        chkerr "$FUNCNAME : cannot create k4db/k4_pool/nulltime : $k4db/$k4_pool/nulltime : bc11d49";
        fail="${fail} bc11d49"
    };
    touch "$k4db/$k4_pool/lasttime" || { 
        chkerr "$FUNCNAME : cannot create k4db/k4_pool/lasttime : $k4db/$k4_pool/lasttime : bc11da6";
        fail="${fail} bc11da6"
    };
    [ "$fail" = "fail" ] && return 0 || chkerr "$FUNCNAME : $fail (bd1faaa)"
}
k4db_linkcount () 
{ 
    local ptrnxc="$(find "$k4db/$k4_pool/ptrnx" -type f | awk 'END{printf NR}' )";
    local uidlnc="$(find "$k4db/$k4_pool/uidln" -type f | awk 'END{printf NR}' )";
    local k4_match_cap="$k4_match_cap";
    [ "$k4_match_cap" ] || { 
        [ -t 1 ] && k4_match_cap="$(tput li)" || k4_match_cap=24
    };
    printf "% 3s/%s/%s %s" "$ptrnxc" "$uidlnc" "$k4_match_cap" "$*";
    [ $ptrnxc -ge $k4_match_cap ] && chkwrn "k4_match_cap=$k4_match_cap overflow" && echo;
    [ $ptrnxc -eq 0 ] && chkwrn "null match"
}
k4db_logstd () 
{ 
    echo "$*" | tai64n >> "${k4db}/${k4_pool}/log"
}
k4db_mknxk4 () 
{ 
    local nx="$1" k4="$2";
    [ "$nx" ] || { 
        chkerr "$FUNCNAME \$nx is null {5bachual} ";
        return 1
    };
    [ -f "$k4" ] || { 
        chkerr "$FUNCNAME \$k4 is not a regular file {5bacnoun}";
        return 1
    };
    set $(k4db_headx '^%km ' "$k4" | head -n1 | sed 's/_/ /g');
    ln -f "$k4" "$k4db/$k4_pool/uidln/$3$4";
    { 
        echo "$k4";
        echo "$3$4"
    } > "$k4db/$k4_pool/ptrnx/$nx";
    ln -f "$k4db/$k4_pool/ptrnx/$nx" "$k4db/$k4_pool/ptrid/$3$4"
}
k4db_mkuidln () 
{ 
    local k4="$1";
    [ -f "$k4" ] || { 
        chkerr "$FUNCNAME \$k4 is not a regular file {5bacnoun}";
        return 1
    };
    set $(k4db_headx '^%km ' "$k4" | head -n1 | sed 's/_/ /g');
    ln -f "$k4" "$k4db/$k4_pool/uidln/$3$4"
}
k4db_showpool () 
{ 
    k4db_hl '\';
    find $k4db/$k4_pool/ptrnx -type f;
    k4db_hl '-';
    find $k4db/$k4_pool/ptrid -type f;
    k4db_hl '-';
    find $k4db/$k4_pool/uidln -type f;
    k4db_hl '/'
}
k4db_trunc () 
{ 
    [ -t 1 ] && { 
        local cols="$(tput cols)";
        awk -v cols=$((cols-1)) 'length > cols{$0=substr($0,0,cols)"_"}1'
    } || cat
}
k4db_valid_bg () 
{ 
    true
}
k4db_valid_cmd () 
{ 
    local cksum fail="fail";
    [ "$k4db" = "/Users/geo/dot4" ] || { 
        chkerr "$FUNCNAME : unexpected k4db : $k4db : bc02189";
        fail="${fail} bc02189"
    };
    [ "$k4_pool" = "3/c/0" ] || { 
        chkerr "$FUNCNAME : invalid k4_pool : $k4_pool : bbfcf27";
        fail="${fail} bbfcf27"
    };
    [ "$k4_hist" = "3/c/2" ] || { 
        chkerr "$FUNCNAME : invalid k4_hist : $k4_hist : bc029a0";
        fail="${fail} bc029a0"
    };
    [ -d "$k4db/$k4_pool/ptrnx" ] || { 
        chkerr "$FUNCNAME : not a directory k4db/k4_pool/ptrnx : $k4db/$k4_pool/ptrnx : bbfca90";
        fail="${fail} bbfca90"
    };
    [ -d "$k4db/$k4_pool/ptrid" ] || { 
        chkerr "$FUNCNAME : not a directory k4db/k4_pool/ptrid : $k4db/$k4_pool/ptrid : bbfca91";
        fail="${fail} bbfca91"
    };
    [ -d "$k4db/$k4_pool/uidln" ] || { 
        chkerr "$FUNCNAME : not a directory k4db/k4_pool/uidln : $k4db/$k4_pool/uidln : bbfca92";
        fail="${fail} bbfca92"
    };
    [ -x "$k4db/$k4_pool/ptrnx" -a -w "$k4db/$k4_pool/ptrnx" ] || { 
        chkerr "$FUNCNAME : invalid k4db/k4_pool/ptrnx : $k4db/$k4_pool/ptrnx : bc02c20";
        fail="${fail} bc02c20"
    };
    [ -x "$k4db/$k4_pool/ptrid" -a -w "$k4db/$k4_pool/ptrid" ] || { 
        chkerr "$FUNCNAME : invalid k4db/k4_pool/ptrid : $k4db/$k4_pool/ptrid : bc02c21";
        fail="${fail} bc02c21"
    };
    [ -x "$k4db/$k4_pool/uidln" -a -w "$k4db/$k4_pool/uidln" ] || { 
        chkerr "$FUNCNAME : invalid k4db/k4_pool/uidln : $k4db/$k4_pool/uidln : bc02c22";
        fail="${fail} bc02c22"
    };
    [ -e "$k4db/$k4_pool/nulltime" ] || { 
        chkerr "$FUNCNAME : no nulltime : $k4_nulltime : bbfd346";
        fail="${fail} bbfd346"
    };
    [ -e "$k4db/$k4_pool/lasttime" ] || { 
        chkerr "$FUNCNAME : no lasttime : $k4_lasttime : bbfd371";
        fail="${fail} bbfd371"
    };
    cksum="$(k4db_headx "${k4_view}" /Users/geo/dot4/5/c/4/e/1/a/^/^5c4e1a.kdb | cksum)";
    [ "$cksum" = "4227768052 382" ] || { 
        chkerr "$FUNCNAME : failed k4_view cksum : c4e1a";
        fail="${fail} bbeec"
    };
    [ "$fail" = "fail" ] && return 0 || chkerr "$FUNCNAME : $fail";
    return 1
}
k4db_xss_ddiff () 
{ 
    local v t0="${1}.0" t1="${1}.1";
    [ -e "$t0" -a -e "$t1" ] || { 
        chkerr "$FUNCNAME $1 : Invalid input $t0 $t1 bc4dcae";
        return 1
    };
    shift;
    local pass="$*";
    set $(sed -e 's/_/ /' "$t1" "$t0"         | awk '{print  $1,$2}' | tr ' ' '\n'         | while read v ; do printf '%d\n' "0x$v" ; done         | tr '\n' ' ');
    dc -e "4k $1 $3 - $2 $4 - 1006632959 / + n";
    echo -n " $pass"
}
k4del () 
{ 
    local a;
    kc $1 && local k4d=$(dirname $k4) || chkerr "$FUNCNAME $1 : error (c2ec9c0)" || return 1;
    chkwrn "DELETE $k4d/";
    read -n1 -p "(y/N) " a;
    echo;
    [ "$a" = "y" ] && rm -i -rf "$k4d/" || chkwrn cancled
}
k4dkm () 
{ 
    local pxrt="$1";
    [ "$pxrt" ] || pxrt='.';
    [ -d "$pxrt" ] || { 
        chkerr "pxrt=$pxrt not a directory (d040a1d)";
        return 1
    };
    shift;
    local kp=$@;
    set $(echo | tai64n | tr '\n' ' ' | sed -e 's/^@4[0]*//' -e 's/.\{8\}/& /');
    local xs="$1";
    local ss="$2";
    local xa="$(echo 0x$xs 0x${ss::4} | awk '{printf "%d %d +p\n",$1,$2}' | dc - | awk '{printf "%x \n",$1}')";
    local seed=/$xa$xs$ss;
    while [ -d $(dirname "${pxrt}${seed}") ]; do
        seed="$(echo "$seed" | sed -e 's:.*/.:&/:' -e 's://$:/c:' )";
    done;
    { 
        echo "${pxrt}${seed}" | sed -e 's:.*/:& :' -e 's/ .*//';
        echo $xa $xs $ss;
        local epoch=$(echo "$seed" | sed -e 's:/[^/]*$::' -e 's:/::g' ;);
        echo $epoch;
        echo "$( gpw 1 $(( ${#epoch} * ${#epoch} / 18 + 4 )) | awk '{printf "%8s",$1}' )";
        date "+%Y%m%d %H%M %Z %z %a %s"
    } | k4_squeeze;
    echo
}
k4eid () 
{ 
    xss | k4d "$k4db" | awk '{print $5,$4}'
}
k4gen () 
{ 
    local ks="$*";
    set $( k4dkm $k4db );
    local d="${1}^/";
    local xa="$2";
    local xs="$3";
    local ss="$4";
    local ep="$5";
    local pw="$6";
    mkdir -p "${d}/_";
    local _k4="^meta.kdb";
    local _md="_data.md";
    local i="$(k4ki 57)";
    local da="$(( 0x$xs ))";
    local v="$(dc -e "$da 2 / $da v + p" | awk '{printf "%08x",$1}')";
    local e="$(printf '%x' "$(( 0x$xs - 86400 * 18 ))" )";
    local z="$xs";
    local knd=$(nevernowd);
    local knx=$(nevernowx);
    local kno=$(nevernowo);
    local ptr_k4="$d/$_k4";
    local ptr_md="$d/$_md";
    local kl=$(cat $k4db/$k4_env/kl | k4_squeeze | k4_raw );
    local kc=$(cat $k4db/$k4_env/kc | k4_squeeze | k4_raw );
    shift;
    cat >> ${ptr_k4}  <<EOF
%ks $ks
%kt
%kk $ep # new key
%kc $kc # class
%kp $ep $pw # hier superord
%kj $ep $pw # motive subord
%kr $ep $pw # matrix relate
%kl $kl # serial last
%knd $knd
%knx $knx
%kno $kno
%km $@
%kd $_md
%kv $v # value
%ki $i
%ke $e # event begin
%kz $z # event end
EOF

    ln "$ptr_k4" "$ptr_md";
    printf "\n\n# ${ks}\n\n" >> "$ptr_md";
    echo "$d $_k4 $@"
}
k4kc () 
{ 
    local k4="$1";
    [ -f "$k4" ] || chkerr "$FUNCNAME : not a regular file k4='$k4' (d02eb90)" || return 1;
    k4db_headx '^%kc\ ' "$k4"
}
k4ki () 
{ 
    local days="$1";
    [ "$days" ] || days=57;
    [[ $days =~ ^-?[0-9]+$ ]] || chkerr "$FUNCNAME : arg1 interger expected days='$days' (af7e0)";
    local i="$(printf '%x' "$(( $(date '+%s') + 86400 * $days ))" )";
    local il="$(echo "$i" | xs2tai | tai64nlocal | sed 's/[.|][0]*$//')";
    echo "$i # $il review"
}
k4kl () 
{ 
    local k4="$1";
    [ -f "$k4" ] || chkerr "$FUNCNAME : not a regular file k4='$k4' (bda5b1e)" || return 1;
    k4db_headx '^%km\ ' "$k4" | sed -e 's/^%km\ //' -e 's/_/ /g' | awk '{printf "%s %s %s ","%kl",$4,$5}';
    k4db_headx '^%ks\ ' "$k4"
}
k4ks () 
{ 
    local k4="$1";
    [ -e "$k4" ] || { 
        chkerr "$FUNCNAME k4 '$k4' does not exist (bda4be0)";
        return 1
    };
    k4db_headx '^%ks\ ' "$k4"
}
k4p () 
{ 
    find $k4db/$k4_pool -name =\* | sed 's/.*0//' | sort -d | column;
    echo $k4_pool | sed 's/.*0/0/'
}
k4stat () 
{ 
    local f fs;
    [ "$1" ] && fs="$1" || fs="$(cat)";
    echo "$fs" | while read f; do
        [ -f "$f" ] && { 
            { 
                stat -f '%l %i %m' "$f";
                cksum "$f"
            } | tr '\n' ' ' | awk '{printf "%x%07x %8x %8x % 8x ",$1,$2,$3,$4,$5}';
            echo "$f"
        } || chkerr "$FUNCNAME : not a regular file : $f";
    done
}
k_ () 
{ 
    local day="$1";
    $k4db_logstd "begin $$ : since='$since' $FUNCNAME $day";
    [ "$day" ] || day=3;
    local since;
    since="-mtime -${day}" kj .;
    $k4db_logstd "end $$ : since='$since' $FUNCNAME $day"
}
k__ () 
{ 
    local min="$1";
    $k4db_logstd "begin $$ : since='$since' $FUNCNAME $min";
    [ "$min" ] || min=90;
    local since;
    since="-mmin -${min}" kj .;
    $k4db_logstd "end $$ : since='$since' $FUNCNAME $arg"
}
ka () 
{ 
    $k4db_logstd "start $$ : $FUNCNAME $*";
    local k4;
    set $(k4_inptr "$1");
    k4="$1";
    [ -e "$k4" ] || chkerr "invalid ptr (no $k4)" || return 1;
    aspell -c "$k4";
    k4db_mknxk4 "0" "$k4";
    [ -e "${k4},v" ] || ci -m"(by $FUNCNAME)" -l -t-kdb -m'aspell' -q "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"(by $FUNCNAME)" -l -q "$k4";
    k4_post "$k4";
    $k4db_logstd "end $$ : $FUNCNAME $*"
}
kc () 
{ 
    $k4db_logstd "start $$ : $FUNCNAME $@";
    set $(k4_inptr "$1");
    export k4="$1";
    [ -e "$k4" ] || chkerr "$FUNCNAME no k4='$k4' (bc785a2)" || return 1;
    k4db_hl '\';
    cat "$k4";
    k4db_hl '|';
    k4_post "$k4";
    k4db_hl '/';
    k4db_mknxk4 "0" "$k4";
    $k4db_logstd "end $$ : $FUNCNAME $@"
}
kcs () 
{ 
    kc $@ | less
}
kg () 
{ 
    k4db_valid_cmd || chkerr "$FUNCNAME : fail k4db_valid_cmd bc73b10 " || return 1;
    local uidln uid;
    local filter="$(k4_wrapregex $@)";
    k4db_hl '\';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.0;
    find $k4db/$k4_pool/uidln -type f | while read uidln; do
        awk 'NR==1,/^%kz/' "$uidln" | grep -E "${k4_search}" | grep $case -qE "$filter" && { 
            k4kl "$uidln";
            echo
        } || { 
            uid="${uidln##*/}";
            rm -i -f "$uidln" "$k4db/$k4_pool/ptrid/$uid"
        };
    done;
    k4db_hl '/';
    knx;
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.1;
    { 
        k4db_linkcount ": $FUNCNAME ${case} '${filter}' : ";
        k4db_xss_ddiff $k4db/$k4_pool/tx.${FUNCNAME} seconds
    } | $k4_unlong
}
kgl () 
{ 
    k4_search='^%k(s|m|t|j) ' kg $@
}
kgm () 
{ 
    k4_search='^%km ' kg $@
}
kgs () 
{ 
    k4_search='^%ks ' kg $@
}
kgt () 
{ 
    k4_search='^%kt ' kg $@
}
kh () 
{ 
    xss | k4d ~/dot4/0 $(date "+%Y%m%dT%H%M%S%z %a %s") | cut -d \  -f3-;
    xssdaysec | tee $k4db/$k4_pool/tx.${FUNCNAME}.0;
    local k4ptr="$1";
    [ "$k4ptr" ] || k4ptr=0;
    k4db_hl '\';
    set $(k4_inptr "$1") && k4_post "$1";
    k4db_hl '/';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.1;
    { 
        k4db_linkcount ": since='${since}' $FUNCNAME $arg : ";
        k4db_xss_ddiff "$k4db/$k4_pool/tx.${FUNCNAME}" seconds
    } | $k4_unlong;
    $k4db_logstd "end $$ : since='$since' $FUNCNAME $arg"
}
kj () 
{ 
    [ "$*" ] || { 
        k4_help;
        return 1
    };
    local k4 n nx k4_more_match_cap k4_match_cap="$k4_match_cap" arg="$1";
    $k4db_logstd "begin $$ : since='$since' $FUNCNAME $arg";
    k4db_valid_cmd || return 1;
    n="$(knx_count d)";
    [ "$k4_match_cap" ] || { 
        [ -t 1 ] && k4_match_cap="$(tput li)" || k4_match_cap=24
    };
    k4_new_match_cap=$(( n + k4_match_cap -5));
    { 
        k4db_linkcount ": since='$since' $FUNCNAME '$arg' : "
    } | k4_squeeze;
    echo;
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.0;
    k4db_hl '\';
    k4db_fk4 | while read k4; do
        awk 'NR==1,/^%kz/' "$k4" | grep -E "${k4_search}" | grep "$case" -qE "$arg" && { 
            set $(k4kl "$k4");
            n=$(( n + 1 ));
            nx=$(printf "%o" "$n");
            k4db_mknxk4 "$nx" "$k4";
            k4db_headx '^%ks ' "$k4" | awk -v nx=$nx -v xs="$2" 'NR==1 {printf "%4s %8s %s\n",nx,xs,$0}'
        };
        [ $n -lt $k4_new_match_cap ] || return 0;
    done | $k4_unlong;
    k4db_hl '/';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.1;
    { 
        k4db_linkcount ": since='$since' $FUNCNAME '$arg' : ";
        k4db_xss_ddiff "$k4db/$k4_pool/tx.${FUNCNAME}" seconds
    } | k4_squeeze | $k4_unlong;
    $k4db_logstd "end $$ : since='$since' $FUNCNAME $arg"
}
kjq () 
{ 
    kj $@ > /dev/null &
}
kjt () 
{ 
    k4_search="^%kt " kj $@
}
kl () 
{ 
    local ex="$1";
    local uidlnd="$k4db/$k4_pool/uidln" ptrnxd="$k4db/$k4_pool/ptrnx";
    local xs nxp uidln ptrid;
    k4db_linkcount ": $FUNCNAME $@ {sort mod} : ";
    echo knx;
    k4db_hl '\';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.0;
    knx;
    ls "$uidlnd" | while read uidln; do
        nxp=$(grep --files-with-matches "$uidln" "$ptrnxd"/* | head -n1 );
        printf '%- 3s ' "${nxp##*/}";
        xs="${uidln::8}";
        echo -n "$xs ";
        k4db_headx '^%ks ' "$uidlnd/$uidln";
        [ "$ex" ] && k4db_headx "$ex" "$uidlnd/$uidln" | k4db_headx_filter | awk -v xs="$xs" '{printf "%12s %s\n","",$0}';
    done | $k4_unlong;
    k4db_hl '/';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.1;
    { 
        k4db_linkcount ": $FUNCNAME $@ {sort xs} : ";
        k4db_xss_ddiff $k4db/$k4_pool/tx.${FUNCNAME} seconds
    } | $k4_unlong
}
kll () 
{ 
    kl "^%k(t|j) "
}
klr () 
{ 
    local ex="$1";
    local uidlnd="$k4db/$k4_pool/uidln" ptrnxd="$k4db/$k4_pool/ptrnx";
    local xs nxp uidln ptrid;
    k4db_linkcount ": $FUNCNAME $@ {sort mod} : ";
    echo knx;
    k4db_hl '\';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.0;
    knx;
    ls -r "$uidlnd" | while read uidln; do
        nxp=$(grep --files-with-matches "$uidln" "$ptrnxd"/* | head -n1 );
        printf '%- 3s ' "${nxp##*/}";
        xs="${uidln::8}";
        echo -n "$xs ";
        k4db_headx '^%ks ' "$uidlnd/$uidln";
        [ "$ex" ] && k4db_headx "$ex" "$uidlnd/$uidln" | k4db_headx_filter | awk -v xs="$xs" '{printf "%12s %s\n","",$0}';
    done | $k4_unlong;
    k4db_hl '/';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.1;
    { 
        k4db_linkcount ": $FUNCNAME $@ {sort -r xs} : ";
        k4db_xss_ddiff $k4db/$k4_pool/tx.${FUNCNAME} seconds
    } | $k4_unlong
}
klrl () 
{ 
    klr "^%k(t|j) "
}
kn () 
{ 
    local xs="$1" k4db="$k4db/$k4_pool/$(k4epoch)";
    echo "$k4_pool/$(k4epoch)"
}
knx () 
{ 
    local ptridc k4;
    k4db_valid_cmd || chkerr "$FUNCNAME : fail k4db_valid_cmd bc72c38" || return 1;
    find "$k4db/$k4_pool/ptrnx" -regex '.*/ptrnx/[[:xdigit:]]*$' -delete;
    find "$k4db/$k4_pool/uidln" -regex '.*/uidln/[[:xdigit:]]\{16\}$' -delete;
    find "$k4db/$k4_pool/ptrid" -regex '.*/ptrid/[[:xdigit:]]\{16\}$' -type f | awk '{printf "%o %s\n",NR,$1}' | while read ptridc; do
        set $ptridc;
        k4="$(head -n1 $2)";
        [ -e "$k4" ] && { 
            ln "$2" "$k4db/$k4_pool/ptrnx/$1";
            ln "$k4" "$k4db/$k4_pool/uidln/${2##*/}"
        } || rm -i -f "$2";
    done
}
knx () 
{ 
    local ptridc k4;
    k4db_valid_cmd || chkerr "$FUNCNAME : fail k4db_valid_cmd bc72c38" || return 1;
    find "$k4db/$k4_pool/ptrnx" -regex '.*/ptrnx/[[:xdigit:]]*$' -delete;
    find "$k4db/$k4_pool/uidln" -regex '.*/uidln/[[:xdigit:]]\{16\}$' -delete;
    find "$k4db/$k4_pool/ptrid" -regex '.*/ptrid/[[:xdigit:]]\{16\}$' -type f | awk '{printf "%o %s\n",NR,$1}' | while read ptridc; do
        set $ptridc;
        k4="$(head -n1 $2)";
        [ -e "$k4" ] && { 
            ln "$2" "$k4db/$k4_pool/ptrnx/$1";
            ln "$k4" "$k4db/$k4_pool/uidln/${2##*/}"
        } || rm -i -f "$2";
    done
}
knx_count () 
{ 
    k4db_valid_cmd || return 1;
    local base="$1";
    [ "$base" ] || base="x";
    [ "$base" = "o" -o "$base" = "d" -o "$base" = "x" ] || chkerr "$FUNCNAME : invalid base arg1=(|o|d|x): $base : bc1098ca" || return 1;
    find "$k4db/$k4_pool/ptrnx" -not -name 0 -regex '.*/ptrnx/[[:xdigit:]]*$' | awk 'END{printf "%'$base'\n",NR}'
}
knxl () 
{ 
    set $(k4_inptr "$1");
    local k4="$1";
    [ -e "$k4" ] || { 
        chkerr "$FUNCNAME k4 '$k4' does not exist (b9d464d)";
        return 1
    };
    { 
        awk 'NR==1,/^%kz/' < "$k4" | sed -e '/^%km\ /!d' -e 's/^%km\ //' -e 's/_/ /g' | awk '{print "%kl",$1,$4}' | tr '\n' ' ';
        sed -e '/^%ks\ /!d' < "$k4"
    } | k4_squeeze
}
krst () 
{ 
    k4db_valid_cmd || return 1;
    k4db_hl '\';
    find "$k4db/$k4_pool/ptrnx" -regex '.*/ptrnx/[[:xdigit:]]*$' -delete;
    find "$k4db/$k4_pool/ptrid" -regex '.*/ptrid/[[:xdigit:]]\{16\}$' -delete;
    find "$k4db/$k4_pool/uidln" -regex '.*/uidln/[[:xdigit:]]\{16\}$' -delete;
    k4db_hl '/';
    [ "$@" ] && kj $@
}
ks () 
{ 
    local invoke="$FUNCNAME $*";
    $k4db_logstd "begin $$ : $invoke";
    local ks="$*";
    set $(k4gen "$ks");
    export k4="$1/$2";
    ci -m"(by $FUNCNAME)" -l -t-kdb -q "$k4";
    k4db_mknxk4 "0" "$k4";
    k 0;
    $k4db_logstd "end $$ : $invoke"
}
kt () 
{ 
    local ex="$1";
    local xs nxp uidln uidlnd="$k4db/$k4_pool/uidln" ptrnxd="$k4db/$k4_pool/ptrnx";
    k4db_linkcount ": $FUNCNAME $@ {sort mod} : ";
    echo knx;
    k4db_hl '\';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.0;
    knx;
    ls -rt "$uidlnd" | while read uidln; do
        nxp=$(grep --files-with-matches "$uidln" "$ptrnxd"/* | head -n1 );
        xs="${uidln::8}";
        printf '%- 3s %s ' "${nxp##*/}" "$xs";
        k4db_headx '^%ks ' "$uidlnd/$uidln";
        [ "$ex" ] && k4db_headx "$ex" "$uidlnd/$uidln" | k4db_headx_filter | awk -v xs="$xs" '{printf "%12s %s\n","",$0}';
    done | $k4_unlong;
    k4db_hl '/';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.1;
    { 
        k4db_linkcount ": $FUNCNAME $@ {sort mod} : ";
        k4db_xss_ddiff $k4db/$k4_pool/tx.${FUNCNAME} seconds
    } | $k4_unlong
}
ktl () 
{ 
    kt "^%k(t|j) "
}
ktr () 
{ 
    local ex="$1";
    local xs nxp uidln uidlnd="$k4db/3/c/0/uidln" ptrnxd="$k4db/3/c/0/ptrnx";
    k4db_linkcount ": $FUNCNAME $@ {sort mod} : ";
    echo knx;
    k4db_hl '\';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.0;
    knx;
    ls -t "$uidlnd" | while read uidln; do
        nxp=$(grep --files-with-matches "$uidln" "$ptrnxd"/* | head -n1 );
        printf '%- 3s ' "${nxp##*/}";
        xs="${uidln::8}";
        echo -n "$xs ";
        k4db_headx '^%ks ' "$uidlnd/$uidln";
        [ "$ex" ] && k4db_headx "$ex" "$uidlnd/$uidln" | k4db_headx_filter | awk -v xs="$xs" '{printf "%12s %s\n","",$0}';
    done | $k4_unlong;
    k4db_hl '/';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.1;
    { 
        k4db_linkcount ": $FUNCNAME $@ {sort -r mod} : ";
        k4db_xss_ddiff $k4db/$k4_pool/tx.${FUNCNAME} seconds
    } | $k4_unlong
}
ktrl () 
{ 
    ktr "^%k(t|j) "
}
kv () 
{ 
    k4db_valid_cmd || chkerr "$FUNCNAME : fail k4db_valid_cmd bc73b10 " || return 1;
    local uidln uid;
    local filter="$(k4_wrapregex $@)";
    k4db_hl '\';
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.0;
    find $k4db/$k4_pool/uidln -type f | while read uidln; do
        awk 'NR==1,/^%kz/' "$uidln" | grep -E "${k4_search}" | grep $case -qE "$filter" && { 
            uid="${uidln##*/}";
            rm -i -f "$uidln" "$k4db/$k4_pool/ptrid/$uid"
        } || { 
            k4kl "$uidln";
            echo
        };
    done;
    k4db_hl '/';
    knx;
    xssdaysec > $k4db/$k4_pool/tx.${FUNCNAME}.1;
    { 
        k4db_linkcount ": $FUNCNAME ${case} '${filter}' : ";
        k4db_xss_ddiff $k4db/$k4_pool/tx.${FUNCNAME} seconds
    } | $k4_unlong
}
kvl () 
{ 
    k4_search='^%k(s|m|t|j) ' kv $@
}
kvm () 
{ 
    k4_search='^%km ' kv $@
}
kvs () 
{ 
    k4_search='^%ks ' kv $@
}
kvt () 
{ 
    k4_search='^%kt ' kv $@
}
kwds () 
{ 
    local w;
    sed -E -e '/^%k(d|r|r|p|nd|nx|no|i|e|v|a|z)(_|\ |$)/d' -e '/^[[:xdigit:]]\{8\}/d' -e 's/http.*( |$)//' | tr -c '[:alnum:]_-=#' ' ' | tr ' ' '\n' | sed -e '/^...$/d' -e '/^..$/d' -e '/^.$/d' -e '/^$/d' -e '/^[[:xdigit:]]\{8\}/d' -e '/^_[[:xdigit:]]\{8\}/d' | aspell -l en munch | tr ' ' '\n' | sed -e 's:/.*::' -e '/^...$/d' -e '/^..$/d' -e '/^.$/d' -e '/^$/d' | sort --ignore-case --unique | while read w; do
        { 
            grep -iEq "(^|\ )${w}(\ |$)" "$k4db_ntag" || echo "$w"
        };
    done | while read w; do
        { 
            grep -iE "(^|\ )${w}(\ |$)" "$k4db_tags" || echo "$w"
        } | awk '{print $1}';
    done
}
kxl () 
{ 
    local uidln="$1" uidlnd="$k4db/3/c/0/uidln";
    [ "$uidln" ] && knxl "$uidln" || { 
        ls "$uidlnd" | while read uidln; do
            k4kl "${uidlnd}/${uidln}";
            echo;
        done
    }
}
livepool () 
{ 
    find $k4db -type d -regex "$k4db/0/.*v$" -name \*v;
    echo '16';
    find $k4db -type d -regex "$k4db/0/.*v$" -name \*v -regex '$k4db/0/.*/[[:xdigit:]]\{16\}v$';
    echo '*';
    find $k4db -type d -regex "$k4db/0/.*v$" -name \*v -regex '$k4db/0/.*/[[:xdigit:]]*v$';
    echo '-E *';
    find -E $k4db -type d -regex "$k4db/0/.*v$" -name \*v -regex '$k4db/0/.*/[[:xdigit:]]*v$';
    echo '-E *';
    find -E $k4db -type d -regex "$k4db/0/.*v$" -name \*v -regex '$k4db/0/.*/[[:xdigit:]]+v$';
    xss | k4d $k4db/0 | awk '{printf "%s %s\n",$1,$0 }'
}
logerr () 
{ 
    echo ">>> $* <<<" | tai64n >> "${k4db}/${k4_pool}/log"
}
logwrn () 
{ 
    echo "^^^ $* ^^^" | tai64n >> "${k4db}/${k4_pool}/log"
}
modifyall-headers-without-changing-stat () 
{ 
    xs=$(xs);
    find "$k4h" -regex '.*/[[:xdigit:]]\{2\}/[[:xdigit:]]\{2\}/[[:xdigit:]]\{4\}/[[:xdigit:]]\{8\}/4000[[:xdigit:]]\{4\}' -exec grep -q '^%k ' \{\} \; -print | while read k4; do
        echo "sed 's/^%k /%ks /' $k4 >${k4}~$xs             && touch -r $k4 ${k4}~$xs             && cat ${k4}~$xs >${k4}             && touch -r ${k4}~$xs $k4             && rm -f ${k4}~$xs";
    done
}
nevernowd () 
{ 
    local i;
    local xs=$(xs);
    local dxs=$(printf %d "0x$xs");
    local ke=1438844400 day=86400 is="6 7 9 12 14 18 23 28 43 38 57 63 194";
    local dxs=$(( dxs - day ));
    for i in $is;
    do
        printf '%02d/%02d ' "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" "$i";
    done
}
nevernowo () 
{ 
    local i;
    local xs=$(xs);
    local dxs=$(printf %d "0x$xs");
    local ke=1438844400 day=86400 is="6 7 9 12 14 18 23 28 43 38 57 63 194";
    local dxs=$(( dxs - day ));
    for i in $is;
    do
        printf '%02oo%02o ' "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" "$i";
    done;
    echo
}
nevernowx () 
{ 
    local i;
    local xs=$(xs);
    local dxs=$(printf %d "0x$xs");
    local ke=1438844400 day=86400 is="6 7 9 12 14 18 23 28 43 38 57 63 194";
    local dxs=$(( dxs - day ));
    for i in $is;
    do
        printf '%02xx%02x ' "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" "$i";
    done
}
ptr () 
{ 
    rev="$(echo "$1" | cut -d\. -f1).$2";
    ip="$(echo "$1" | cut -d\. -f2-)";
    [ "$ip" = "$1" ] && echo "${rev}" || ptr $ip $rev
}
rdot4 () 
{ 
    ptr $(echo space.dot4.$@ | tr '\t\ ' '.') | tr '.' '\ '
}
rev () 
{ 
    local in="${*}^" x1i x1o x2o ot;
    [ "$in" = "^" ] && in="$(cat)^";
    [ -z "$(ecp "1" "$in")" ] && { 
        ecp "2-" "$in";
        return 0
    };
    x1a="$(ecc "2-" "$in" )";
    x1b="$(ecc "1"  "$in" )";
    x2o="$(ecp "2-" "$in" )";
    ot="${x1a}^${x1b}${x2o}";
    $FUNCNAME "$ot"
}
revbyte () 
{ 
    return 1
}
revline () 
{ 
    return 1
}
revword () 
{ 
    return 1
}
stderr () 
{ 
    echo ">>> $* <<<" 1>&2
}
stdstd () 
{ 
    [ "$*" ] && { 
        $k4db_logstd "$*";
        echo "$*";
        return 0
    } || true
}
stdwrn () 
{ 
    echo "^^^ $* ^^^" 1>&2
}
vk4db_env () 
{ 
    return 1
}
vk4db_head () 
{ 
    return 1
}
vk4db_headx () 
{ 
    return 1
}
vk4db_km () 
{ 
    return 1
}
xs () 
{ 
    xss | sed -e 's/.\{9\}$//'
}
xs2local () 
{ 
    local id="$1";
    [ "$id" ] || id="$(cat)";
    echo "$id" | xs2tai | tai64nlocal | sed 's/[\.|][0]*$//'
}
xs2s () 
{ 
    local xs="$1";
    [ "$xs" ] || xs="$(cat)";
    echo "$xs" | while read n; do
        printf "%d\n" "0x$n";
    done
}
xs2tai () 
{ 
    sed -e 's/^/@40000000/' -e 's/$/00000000/'
}
xss () 
{ 
    echo | tai64n | sed -e 's/^@4[0]*//'
}
xssdaysec () 
{ 
    date "+%Y%m%d %H:%M:%S:%a:%s" | tai64n | sed -e "s/^@4[0]*//" -e 's/^[[:xdigit:]]\{8\}/&_/'
}

k4db_init # && chkwrn "k4db_init : success!" || chkerr "k4db_init : fail"

