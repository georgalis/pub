#!/usr/bin/env bash

# k4db Knowledgebase Engine
#
# kdb mvp 5db utwis 
#
# Copyright (C) 2015-2019 George Georgalis <george@galis.org>
# All rights reserved. No redistribution allowed. Including but
# not limited to algorithms, format, procedures and data process
# function(s). Managed data remains under respective copyright of
# the owners.
#
#ks knowledge motive curation query cache pointer db
# 5b9402df %ks curation database cdb (kdb lql) spec
# 5b6cc5aa %ks k4db prefix for development
# 5b56228b %ks design kdb attachments user guide, template spec
# 5afb26f0 %ks mesh chatter (coprocedures)
# 5ad27718 %ks knowledgendian kdb lql spec
# 5a8c6db4 %ks period scheduler and task supervisor spec
# 59dab11b %ks sub kdb idk tools shell functions scraps hex tables
# 59d94184 %ks isbe k4 schema, LQL, knowledge database, k4db Literate Query Language spec
# 59c7febc %ks isbe k4 markdown mermaid mmd spec
# 59bc5f4a %ks isbe kdb tables, types, path, files hist
# 20150807 the only epoch ever used for intervals

Klv ()
{
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3923)";
        return 1
    };
    local ex="$1";
    local idx='' xx='';
    local onc='' ond='' noc='';
    k4db_hl '\';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    k4pool_mkidxs;
    [ -t 1 ] && {
        local pooln="$(ls "$uidptr" | awk 'END{print NR}')";
        local lines="$(tput li)";
        [ "$pooln" -gt "$lines" ] || lines="$(( pooln + 3))";
        local cols="$(tput cols)" line="$(( 2 * pooln - pooln + 3))"
    };
    ls -tr "$uidptr" | while read uid; do
        [ -t 1 ] && {
            set $(nd2rgb $line $lines);
            local r="$1" g="$2" b="$3"
        };
        idx="$(grep --files-with-matches "$uid" "$idxptr"/* | awk 'NR==1 {print}' )";
        idx="${idx##*/}";
        xx="$(k4_headg "^%kv " "$uidhln/$uid" | awk 'NR==1 {print}' | k4_arg 2 )";
        expr "$xx" : '^[[:xdigit:]]\{8\}$' > /dev/null || xx="55c305f0";
        [ -t 1 ] && {
            onc="$( # color on
                       printf '\033[48;2;%d;%d;%dm' "$r" "$g" "$b" # set background
                       printf '\033[38;2;%d;%d;%dm' "$((255-r))" "$((255-g))" "$((255-b))" # set foreground
                       )";
            ond="$( # color on, darker
                       printf '\033[48;2;%d;%d;%dm' "$((-54  + (r + 640 ) /3 ))" "$((-54  + (g + 640 ) /3 ))" "$((-54  + (b + 640 ) /3 ))"
                       printf '\033[38;2;%d;%d;%dm' "$((255-r))" "$((255-g))" "$((255-b))" # set foreground
                       )";
            noc="$( # no color, reset
                       printf '\033[0m'
                       )"
        };
        {
            k4_headg "^%ks\ " "$uidhln/$uid";
            k4_headg "$ex" "$uidhln/$uid" | sed '/^%ks /d'
        } | {
            awk -v cols="$((cols-15))" '{
                if (NR==1) && (length > cols) {$0=substr($0,0,cols)"\\"1}
                (NR>1) && (10+length > cols){$0=substr($0,0,cols)"="1}
                }' | sed '/^$/d' | awk -v cols="$((cols-9))" -v onc="$onc" -v ond="$ond" -v noc="$noc" -v idx="$idx" -v xx="$xx" '{
                if (NR==1) printf "%s%4s %8s %s%s  %*s\n%s",onc,idx,xx,$0,ond,cols-length,"",noc
                     else printf "%s        %s%s%s%*s\n%s",  
                                        ond,onc,$0,ond,cols-length,":",noc
             }'
        };
        line="$((line - 1))";
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": $FUNCNAME $@ {sort value} : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
k ()
{
    $k4db_logstd "start $$ : k4since='$k4since' $FUNCNAME $*";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    set $(k4db_in $1) || {
        chkerr "$FUNCNAME : error k4_inptr arg1='$1' (bfd7c86)";
        return 1
    };
    k4db_validate_k4 $1 || return 1;
    export k4="$1";
    export uid="$2";
    export idx="$3";
    $EDITOR "$k4";
    k4db_k4_head_seq "$k4";
    k4db_validate_k4 "$k4" || return 1;
    [ -e "${k4},v" ] || ci -m"(by $FUNCNAME)" -l -t-kdb -q "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"(by $FUNCNAME)" -l -q "$k4";
    k4db_idx "$k4";
    k4_env_wlink "$k4";
    k4db_mk_idxptr "$k4nptr" "$k4";
    k4db_idx & k4db_hl '~';
    k4_list_tags;
    k4db_hl '.';
    k4_list_kc;
    k4db_hl '-';
    ksynopsys "$k4";
    k4db_hl '~';
    $k4db_logstd "end $$ : k4since='$k4since' $FUNCNAME $*"
}
k4_arg ()
{
    n="$1";
    [ "$2" ] && {
        echo "$2" | awk -v n="$n" '{printf "%s\n",$n}' && return 0
    };
    awk -v n="$n" '{printf "%s\n",$n}'
}
k4_body ()
{
    local k4="$1";
    awk '/^$/,0' "$k4"
}
k4_count_idxptr ()
{
    local idxptr="$k4db/0/${k4_pool}/^";
    find "$idxptr" -type f | awk 'END{print NR}'
}
k4_count_pooln ()
{
    find "$k4db/0/pool/@" -mindepth 1 -maxdepth 1 -type f | awk 'END{print NR}'
}
k4_count_pools ()
{
    find "$k4db/0/pool" -mindepth 1 -maxdepth 1 -type d -regex '.*/[[:xdigit:]]\{16\}$' | awk 'END{print NR}'
}
k4_count_uidhln ()
{
    local uidhln="$k4db/0/${k4_pool}/%";
    find "$uidhln" -type f | awk 'END{print NR}'
}
k4_count_uidptr ()
{
    local uidptr="$k4db/0/${k4_pool}/=";
    find "$uidptr" -type f | awk 'END{print NR}'
}
k4_env_wlink ()
{
    $k4db_fstart;
    [ "$1" ] && local k4="$1" kl;
    k4db_validate_k4 "$k4" || return 1;
    local env="$k4db/$k4_pool/$k4_env";
    [ -s "$env/kl" ] && mv -i -f "$env/kl" "$env/kl~";
    kl="$(k4_headg '^%kk\ ' "$k4" | k4db_squash_defaults | k4_squeeze )";
    [ "$kl" ] || kl="$(
        { k4_headg '^%km\ ' "$k4" | sed  -e 's/_/ /g' | awk '{printf "%%kl %s %s %s ",$5,$6,$7}'
          k4_headg '^%ks\ ' "$k4" ;} | k4_squeeze )";
    $k4db_fstop
}
k4_headg ()
{
    local e="$1" k4="$2";
    awk 'NR==1,/^$/' "$k4" | awk '!/^$/' | grep -E "$e"
}
k4_headv ()
{
    local e="$1" k4="$2";
    awk 'NR==1,/^$/' "$k4" | awk '!/^$/' | grep -vE "$e"
}
k4_help ()
{
    cat  <<EOF
======== Nomenclature:
 k{name}     user shell function
 k4_{name}   function on elements
 k4db_{name} function on entire db

${FUNCNAME}_1 : Major commands
${FUNCNAME}_2 : Primitive functions
${FUNCNAME}_3 : Unit operations
${FUNCNAME}_4 : Development
${FUNCNAME}_5 : Environment
${FUNCNAME}_6 : GLOSSARY
${FUNCNAME}_7 : PATHs
${FUNCNAME}_8 : K4 file format
${FUNCNAME}_9 : All of the above
EOF

}
k4_help_1 ()
{
    local c;
    cat  <<EOF
======== Major commands #:o
 $(c='#:o' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" | sed -e "s/ ().*$c/	:/"   -e "s/$c/ :/")
EOF

}
k4_help_2 ()
{
    local c;
    cat  <<EOF
======== Primitive functions #::
 $(c='#::' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" | sed -e "s/ ().*$c/	:/"   -e "s/$c/ :/")
EOF

}
k4_help_3 ()
{
    local c;
    cat  <<EOF
======== Unit operations #:>
 $(c='#:>' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" | sed -e "s/ ().*$c/	:/"   -e "s/$c/ :/")
EOF

}
k4_help_4 ()
{
    local c;
    cat  <<EOF
======== Development #:-
 $(c='#:-' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" | sed -e "s/ ().*$c/	:/"   -e "s/$c/ :/")
EOF

}
k4_help_5 ()
{
    local c;
    cat  <<EOF
======== Environment
$(export c='#:$' ; grep -Ev '^(#|\$|	)' "$k4db_fun" | grep "$c" )
$(grep ^export "$k4db_fun")
EOF

}
k4_help_6 ()
{
    cat  <<EOF
======== GLOSSARY
 k4    kdb file and/or path
 k4db  set of k4
 c     query k4db records
 k     act on specific c result
EOF

}
k4_help_7 ()
{
    cat  <<EOF
======== PATHs

 \$k4db/pool/0/ptrid/\$uid
======== FILEPATHs

   local k4d_pool="$k4_pool/$(k4epoch)"
   # mkdir -p pool query directory
    # qury 0
    # root  dot4
    # pool  ${root}/pool/0/...
    # qury  ${root}/0/xsss^/ ${epoch}${span}^
    # ddir  ${root}/${epoch}${span}^
    # k4    ${root}/${epoch}${span}^/_${epoch}.kdb
    # link  ${root}/${epoch}${span}^/^/_${epoch}${span}.kdb
 \$k4db/0/5/c11d 5 5c11d ropr c11d # k4epoch | k4d dot4/0
 \$k4db/pool/: misc tmp files
X\$k4db/pool/0/{ep}/0.log: primary search log
X\$k4db/pool/0/{ep}/1.cmd: invocation command
 \$k4db/pool/0/uidln/\$uid : uid ([:xdigit:]]\{16\}) named link to k4 file
 \$k4db/pool/0/ptrid/\$uid : ptr data (2 lines: k4 path and uid) of k4 uid ([:xdigit:]]\{16\})
 \$k4db/pool/0/ptrnx/\$nx : 0x numbered link to ptrid/\$uid
 \$k4db/pool/0/tx.\$FUNCNAME}.0 : benchmark start time
 \$k4db/pool/0/tx.\$FUNCNAME}.1 : benchmark stop time
X\$k4db/pool/0/{ep}/xss/'[[:xdigit:]]\{24\}$': primary search result (^k4 %k*)
 \$k4db/pool/1/\$(date "+%Y%m%d")/ptrid/: ptrid for abandoned results
 \$k4db/pool/1/xss/{xss}: secondary search result {xss} link to pool/0/*/xss/[[:xdigit:]]\{24\} (^k4 %k*)
X\$k4db/pool/1/{kx}/{xss}: secondary search, xss links to pool/0/*/xss/[[:xdigit:]]\{24\} (^k4 %ks %kx)
 \$k4db/pool/1/secondary.log: secondary search log
 \$k4db/4/: display search index, epoch bundle (local cache)
 \$k4db/4/0/0: last (^k4 %ks %kx)
 \$k4db/4/0/1: prior (^k4 %ks %kx)
 \$k4db/4/0/2: prior (^k4 %ks %kx)
 \$k4db/4/0/3: prior (^k4 %ks %kx)
 \$k4db/4/0/4: prior (^k4 %ks %kx)
 \$k4db/4/0/5: prior (^k4 %ks %kx)
 \$k4db/4/0/6: prior (^k4 %ks %kx)
 \$k4db/4/0/7: prior (^k4 %ks %kx)
?\$k4db/4/0/{epoch}: cumulative prior display, expires (^k4 %ks %kx)
 \$k4db/4/{epoch}/xss/{xss}: layer {epoch} search files, cumulative log, from pool/1/* on epoch reset
 \$k4db/4/{epoch}/nx/{nx}: layer {epoch} search files, cumulative log, from pool/1/* on epoch reset
X\$k4db/4/{epoch}/kx/{kx}: layer {epoch} search files, cumulative log, from pool/1/* on epoch reset
 \$k4db/4/{epoch}/0.log: cumulative log, from pool/1/secondary.log on epoch reset
 \$k4db/5/: kdb master (best available)
 \$k4db/6
 \$k4db/tag.tbl
 \$k4db/finit.bash
 \$k4db/.git
 \$k4db/design
 \$k4db/dev
 \$k4db/bin
 \$k4db/man
 \$k4db/   ./4/{tag} : list of dot3
 \$k4db/   ./3/{[:xdigit:]*/}/ : cache index of
dot4/xxx/ cumulative logs and ptr performance indices
dot4/^/5bccbbbb/idxptr
dot4/=/5bccbbbb/uidptr
dot4/%/5bccbbbb/uidhln
EOF

}
k4_help_8 ()
{
    grep '^	' "$k4db_fun";
    cat  <<'EOF'
EOF

}
k4_help_9 ()
{
    k4_help_1;
    echo;
    k4_help_2;
    echo;
    k4_help_3;
    echo;
    k4_help_4;
    echo;
    k4_help_5;
    echo;
    k4_help_6;
    echo;
    k4_help_7;
    echo;
    k4_help_8
}
k4_inventory ()
{
    $k4db_logstd "start $$ : $FUNCNAME $*";
    set $(k4db_in "$1" 1);
    k4db_validate_k4 "$1" || return 1;
    export k4="$1";
    k4_headg "$k4_topic" "$k4";
    local p="${1%/*}" k="${1##*/}";
    local not_find="-not ( -name *,v -o -name '$k' -o -name ^ )";
    find "$p" -mindepth 1 -prune -type f -name "$k" -exec printf "        K4 %s \n" \{\} \;;
    find "$p" -mindepth 1 -prune -type d $not_find -exec printf "       DIR %s/\n" \{\} \; | sort -d;
    find "$p" -mindepth 1 -prune -type f $not_find -exec printf "      FILE %s \n" \{\} \; | sort -d;
    {
        find "$p" -mindepth 1 -prune -type f $not_find | awk 'END{printf "(%d/",FNR}';
        find "$p" -type f $not_find | awk 'END{printf "%d) ",FNR}';
        du -sh "$p/"
    } | awk '{printf "%-10s %s %s\n%-10s %s\n","     TOTAL",$1,$2,"      ROOT",$3 }';
    kin "$k4";
    $k4db_logstd "end $$ : $FUNCNAME $*"
}
k4_isprint_trunc ()
{
    return 1;
    fix to tr -cd isprint characters;
    cat  <<'EOF'
     040 sp        041 ``!''     042 ``"''     043 ``#''     044 ``$''
     045 ``%''     046 ``&''     047 ``'''     050 ``(''     051 ``)''
     052 ``*''     053 ``+''     054 ``,''     055 ``-''     056 ``.''
     057 ``/''     060 ``0''     061 ``1''     062 ``2''     063 ``3''
     064 ``4''     065 ``5''     066 ``6''     067 ``7''     070 ``8''
     071 ``9''     072 ``:''     073 ``;''     074 ``<''     075 ``=''
     076 ``>''     077 ``?''     100 ``@''     101 ``A''     102 ``B''
     103 ``C''     104 ``D''     105 ``E''     106 ``F''     107 ``G''
     110 ``H''     111 ``I''     112 ``J''     113 ``K''     114 ``L''
     115 ``M''     116 ``N''     117 ``O''     120 ``P''     121 ``Q''
     122 ``R''     123 ``S''     124 ``T''     125 ``U''     126 ``V''
     127 ``W''     130 ``X''     131 ``Y''     132 ``Z''     133 ``[''
     134 ``\''     135 ``]''     136 ``^''     137 ``_''     140 ```''
     141 ``a''     142 ``b''     143 ``c''     144 ``d''     145 ``e''
     146 ``f''     147 ``g''     150 ``h''     151 ``i''     152 ``j''
     153 ``k''     154 ``l''     155 ``m''     156 ``n''     157 ``o''
     160 ``p''     161 ``q''     162 ``r''     163 ``s''     164 ``t''
     165 ``u''     166 ``v''     167 ``w''     170 ``x''     171 ``y''
     172 ``z''     173 ``{''     174 ``|''     175 ``}''     176 ``~''
EOF

}
k4_ki ()
{
    local days="$1";
    [ "$days" ] || days=57;
    [[ $days =~ ^-?[0-9]+$ ]] || chkerr "$FUNCNAME : arg1 interger expected days='$days' (af7e0)";
    printf '%x' "$(( $(date '+%s') + 86400 * $days ))"
}
k4_list_kc ()
{
    local _list_kc="$k4db/$k4_list/kc";
    [ -e "$_list_kc" ] && cat "${_list_kc}" | sort | column
}
k4_list_tags ()
{
    local count="$1";
    local _idx_dir="$k4db/$k4_idx";
    local _search="$(echo $k4_search | sed -e 's/^^%//' -e 's/[()]//g' -e 's/[\\ ]//'g | tr '|' '\n' | sort -u | tr '\n' ',')";
    local _idx_search="$_idx_dir/${_search}";
    [ "$count" ] || count=100;
    tr '%' '\n' < "$_idx_search" | sed -e '/^kt /!d' -e 's/^kt //' | tr ' ' '\n' | sed '/^$/d' | sort -i | uniq -ic | sort -n | tail -n "$count" | awk '{print $2}' | sort -i | column
}
k4_pool_idxptr_next ()
{
    export k4doc_$FUNCNAME="#### return next available base 3 ptr for pool_idxptr, commplements k4nr2idx";
    local idxptr="$k4db/0/${k4_pool}/^";
    export k4_idxptr_next="$(( 1 + $(find "$idxptr" -type f | awk 'END{print NR}') ))";
    while [ -e "$idxptr/$(base 3 "$k4_idxptr_next")"; do
        k4_idxptr_next=$(( k4_idxptr_next + 1 ));
    done;
    k4_idxptr_next="$(base 3 "$k4_idxptr_next")";
    echo "$k4_idxptr_next"
}
k4_raw ()
{
    sed -e 's/^%[^ ]* //' -e 's/#.*//' -e 's/ $//'
}
k4_squeeze ()
{
    tr -s '\n\t' ' ' | sed 's/[ ]*$//'
}
k4_term_lines ()
{
    export k4_term_lines="$(tput li)"
}
k4_valid_dir ()
{
    local d="$1";
    [ -d "$d" ] || {
        chkerr "$FUNCNAME '$d' not a dir (d5c0702)";
        return 1
    };
    [ -w "$d" ] || {
        chkerr "$FUNCNAME '$d' not writeable (d5c073b)";
        return 1
    };
    [ -x "$d" ] || {
        chkerr "$FUNCNAME '$d' not executeable (d5c075f)";
        return 1
    };
    shift;
    [ "$1" ] && $FUNCNAME $@ || true
}
k4_wpool_env ()
{
    local pass="$*";
    export k4_env="$k4db/$k4_pool/_/_";
    local k4_env_d="${k4_env%/*}";
    mkdir -p "$k4_env_d" || {
        chkerr "$FUNCNAME mkdir d9bbf0b";
        return 1
    };
    echo "$FUNCNAME $k4_env $pass" > "$k4_env" || {
        chkerr "file d9bbf0b";
        return 1
    };
    echo $FUNCNAME '$k4db/$k4_pool/_/_ $pass' >> "$k4_env" || {
        chkerr "path d9bbf0b";
        return 1
    };
    env >> "$k4_env" || {
        chkerr "env d9bbf0b";
        return 1
    }
}
k4_wrapregex ()
{
    expr "$*" : '^(.*)$' > /dev/null && echo "$*" && return 0;
    echo -n '(';
    while [ $# -ne 0 ]; do
        echo -n "$1";
        shift;
        [ $# -ne 0 ] && echo -n '|';
    done;
    echo ')'
}
k4color ()
{
    local dn="$1" dd="$2";
    set $(nd2rgb $dn $dd);
    local r="$1" g="$2" b="$3";
    onc="$( # color on
                   printf '\033[48;2;%d;%d;%dm' "$r" "$g" "$b" # set background
                   printf '\033[38;2;%d;%d;%dm' "$((255-r))" "$((255-g))" "$((255-b))" # set foreground
                   )";
    onl="$( # color on, lighter
                   printf '\033[48;2;%d;%d;%dm' "$((-54  + (r + 640 ) /3 ))" "$((-54  + (g + 640 ) /3 ))" "$((-54  + (b + 640 ) /3 ))"
                   printf '\033[38;2;%d;%d;%dm' "$((255-r))" "$((255-g))" "$((255-b))" # set foreground
                   )";
    noc="$( # no color, reset
                   printf '\033[0m'
                   )";
    cols="$(tput cols)";
    awk -v cols="$((cols))" '{ printf "%s%*s",$0,cols-length,"" }' | sed -e "
          s/^[ ]*/${onl}&${onc}/
          s/[ ]*$/${onl}&${noc}/
          "
}
k4db_addxd ()
{
    local n="0x$1" d="$2";
    echo $(( $n + $d )) | awk '{printf "%x",$1}'
}
k4db_clean ()
{
    k4db_valid_cmd || {
        chkerr "$FUNCNAME error (3ddf08)";
        return 1
    };
    local _k4_env="$k4db/0/_";
    find "$k4db" -depth -type d -empty -delete;
    touch "$_k4_env/$FUNCNAME";
    export k4_pool="$(k4db_pool)";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    mkdir -p "$idxptr" "$uidptr" "$uidhln" "$poolenv" || {
        chkerr "cannot make pool dirs (d9bcdb0)";
        return 1
    };
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || k4db_new_pool
}
k4db_clean_ks ()
{
    chkerr "$FUNCNAME empty";
    return 1
}
k4db_clean_name ()
{
    tr -dc '\053-\071\101-\132\137\141-\172'
}
k4db_clean_path ()
{
    chkerr "$FUNCNAME empty";
    return 1
}
k4db_clean_xs ()
{
    chkerr "$FUNCNAME empty";
    return 1
}
k4db_clean_xss ()
{
    chkerr "$FUNCNAME empty";
    return 1
}
k4db_dir_km ()
{
    [ "$1" ] || set $(echo | tai64n | sed -e 's/^@4[0]*//' -e 's/.\{8\}/& /');
    local xs="$1" ss="$2";
    set $(k4dir_epoch_span "$k4db" "$xs$ss");
    mkdir -p "$1" || {
        chkerr "$FUNCNAME dir exists, race $1 (d574411)";
        return 1
    };
    local kd="$1" epoch="$2" span="$3";
    local k4hash="$(base 32 $(( 0x$xs + 0x$ss )) )";
    local xa="$(base 16 $(( 0x${xs} + 0x${epoch} + ${#epoch} )) )";
    local k4span32="$(base 32 $((0x$span)) )";
    local hdate="$(date -j -r "$((0x$xs))" "$k4_ht_strftime")";
    local pw="$( gpw 1 $(( ${#epoch} * ${#epoch} / 18 + 4 )) | awk '{printf "%s",$1}' )";
    echo "$kd $xa $xs $ss $epoch $pw $k4hash $k4span32 $hdate"
}
k4db_env_get_kl ()
{
    $k4db_fstart;
    local env="$k4db/$k4_pool/$k4_env";
    [ -s "$env/kl" ] && cat "$env/kl" || {
        [ -s "$env/kl~" ] && cat "$env/kl~"
    };
    $k4db_fstop
}
k4db_fk4 ()
{
    $k4db_logstd "find ${k4db} ${k4since} -regex '.*_/.*' -prune -type f -name '*.kdb'";
    find ${k4db} ${k4since} -regex '.*_/.*' -prune -type f -name '*.kdb';
    $k4db_logstd "find ${k4db} ${k4since} -regex '.*^/.*' -prune -type f -name '*.kdb'";
    find ${k4db} ${k4since} -regex '.*^/.*' -prune -type f -name '*.kdb'
}
k4db_fold ()
{
    [ -t 1 ] && {
        local cols="$(tput cols)";
        fold -s -w $cols
    } || cat
}
k4db_hl ()
{
    local char="$1";
    [ "$char" ] || char="-";
    [ -t 1 ] && {
        local cols="$(tput cols)";
        tput md;
        printf "%*s\n" $cols '' | tr ' ' "$char";
        tput me
    } || true
}
k4db_idx ()
{
    local k4;
    local _idx_dir="$k4db/$k4_idx";
    local _search="$(echo $k4_search | sed -e 's/^^%//' -e 's/[()]//g' -e 's/[\\ ]//'g | tr '|' '\n' | sort | tr '\n' ',')";
    local _idx_search="$_idx_dir/${_search}";
    local _list_dir="$k4db/$k4_list";
    local _kc _list_kc="$_list_dir/kc";
    find "${_idx_search}" -type f -mtime -1 && chkwrn bypass indexing && return 0;
    [ -d "$_idx_dir" ] || {
        chkerr "$FUNCNAME _idx_dir not a dir : $_idx_dir (d24ca6a)";
        return 1
    };
    [ -w "$_idx_dir" ] || {
        chkerr "$FUNCNAME _idx_dir not writeable : $_idx_dir (d24ca6b)";
        return 1
    };
    [ -x "$_idx_dir" ] || {
        chkerr "$FUNCNAME _idx_dir not executeable :$_idx_dir (d24ca6c)";
        return 1
    };
    [ -e "$_idx_search" ] || touch "$_idx_search";
    [ -e "$_list_kc" ] || touch "$_list_kc";
    [ "$1" ] && {
        k4="$1";
        k4db_validate_k4 "$k4";
        _kc="$(k4_headg '^%kc ' "$k4" | k4db_squash_defaults | awk NR==1                 | tr -s ' ' | sed 's/ $//' )";
        [ "$_kc" ] && {
            grep -q "^$_kc" "$_list_kc" || echo "$_kc" >> "$_list_kc"
        };
        printf '%s ' "$k4" >> "$_idx_search";
        k4_headg "${k4_search}" "$k4" | k4db_squash_defaults | sed '/%km /s/_/ /g' | tr -s ' ' | sed 's/ $//' | k4_squeeze >> "$_idx_search"
    };
    [ "$1" ] || {
        local _idx_search_n="$(mktemp "${_idx_search}-XXXX")";
        local _list_kc_n="$(mktemp "${_list_kc}-XXXX")";
        k4db_fk4 | while read k4; do
            _kc="$(k4_headg '^%kc ' "$k4" | k4db_squash_defaults | awk NR==1                 | tr -s ' ' | sed 's/ $//' )";
            [ "$_kc" ] && echo "$_kc" >> "$_list_kc_n";
            printf "%s " "$k4" >> "$_idx_search_n";
            k4_headg "${k4_search}" "$k4" | k4db_squash_defaults | sed '/%km /s/_/ /g' | k4_squeeze >> "$_idx_search_n";
        done;
        sort -u "$_list_kc_n" > "${_list_kc_n}.sort" && mv -i -f "${_list_kc_n}.sort" "${_list_kc}" && rm -i -f "$_list_kc_n";
        sort -du "${_idx_search_n}" > "${_idx_search_n}.sort" && mv -i -f "${_idx_search_n}.sort" "${_idx_search}" && rm -i -f "${_idx_search_n}"
    }
}
k4db_idx_dt ()
{
    local arg1="$1";
    [ "$arg1" ] || arg1="$(cat)";
    tr -dc ' %+,-.0123456789:;@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_abcdefghijklmnopqrstuvwxyz' | tr -s ' '
}
k4db_idxptr_ks ()
{
    local idxptr="$k4db/0/${k4_pool}/^";
    local idx="$1";
    local ptrf="$idxptr/$idx";
    [ -d "$ptrf" ] && chkerr "$FUNCNAME 'idxptr/idx' is a directory (d8266fd)";
    return 1;
    local k4="$(awk 'NR==1 {print}' "$ptrf")";
    local uid="$(awk 'END   {print}' "$ptrf")";
    local xs="${uid::8}";
    k4_headg '^%ks ' "$k4" | awk -v n="$idx" -v xs="$xs" 'NR==1 {printf "%4s %8s %s\n",n,xs,$0}' | $k4_unlong
}
k4db_in ()
{
    $k4db_logstd "start $$ : $FUNCNAME $*";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    local in="$1";
    local ot="$2";
    local hln uid ptrf uid;
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    local ptr ptrf idx idxf;
    find "$k4db/0/pool" -depth -regex "$k4db/0/pool/[[:xdigit:]]\{16\}[/]*.*$" -delete;
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ "$in" ] || ptrf="$(find "$uidptr" -name "$(ls -t "$uidhln" | awk 'NR==1 {print}')")";
    [ "$ptrf" ] || ptrf="$(find "$idxptr" -name "${in}"  -regex '.*/0/pool/[[:xdigit:]]\{16\}\^/[[:xdigit:]]*$' )";
    [ "$ptrf" ] || ptrf="$(find "$uidptr" -name "${in}"  -regex '.*/0/pool/[[:xdigit:]]\{16\}=/[[:xdigit:]]\{16\}$' )";
    [ "$ptrf" ] || ptrf="$(find "$uidptr" -name "${in}*" -regex '.*/0/pool/[[:xdigit:]]\{16\}=/[[:xdigit:]]\{8\}$' )";
    [ "$ptrf" ] || {
        hln="$(find "$uidhln" -samefile "$in" 2>/dev/null | awk 'NR==1 {print}')";
        [ "$hln" ] && uid="${hln##*/}";
        [ -f "$uidptr/$uid" ] && ptrf="$uidptr/$uid"
    };
    bash;
    [ "$ptrf" ] || {
        chkerr "$FUNCNAME : no match for '$in' in '${k4_pool}' (bcfce6d)";
        return 1
    };
    case "$ot" in
        1)
            ot="$(awk 'NR==1 {print}' "$ptrf")"
        ;;
        2)
            ot="$(awk 'END   {print}' "$ptrf")"
        ;;
        3)
            ot="$(awk 'END   {print}' "$ptrf")";
            ot="$(find "$idxptr" -samefile "$uidptr/$ot")";
            ot="${ot##*/}"
        ;;
        *)
            ot="$($FUNCNAME "$in" 1
                $FUNCNAME "$in" 2
                $FUNCNAME "$in" 3)"
        ;;
    esac;
    echo $ot;
    $k4db_logstd "end $$ : $FUNCNAME $*"
}
k4db_init ()
{
    local cksum fail="fail";
    local h="$(cd ~ && pwd -P)";
    [ "$k4db" = "$h/dot4" ] || {
        chkerr "$FUNCNAME : unexpected k4db : $k4db : bc11a92";
        fail="${fail} bc11a92";
        return 1
    };
    export k4_search="^%(ks|kt|kk|kc|kp|kj|kr|kl|km|kd|kv)\ ";
    export k4_topic="^%(ks|kt|kk|kc|kp|kj|kl)\ ";
    export k4_ht_strftime="+%s %Y%m%d %H%M %Z %z %a";
    [ "$LC_ALL" ] || export LC_ALL="C";
    export k4db_tags="$k4db/c/etc/tags.tbl";
    export k4db_ntag="$k4db/c/etc/ntag.tbl";
    export k4db_logstd="true #";
    export k4db_logstd="k4db_logstd";
    export k4db_fstart="$k4db_logstd"\ 'start $$ : $FUNCNAME $*';
    export k4db_fstop="$k4db_logstd"\ 'stop  $$ : $FUNCNAME $*';
    export k4_unlong='k4db_fold';
    export k4_unlong='k4db_trunc';
    export k4case='-i';
    export k4_named="$k4db/0/@";
    export k4_env="$k4db/0/_";
    export k4_log="$k4db/0/,";
    mkdir -p "$k4_named" "$k4_env" "$k4_log" || {
        chkerr "cannot create k4db standard directory(ies) (d49f583)";
        fail="${fail} d49f583"
    };
    touch -t 201508060000 "${k4_env}/nulltime" || {
        chkerr "$FUNCNAME : cannot create nulltime (bc11d49)";
        fail="${fail} bc11d49"
    };
    touch "${k4_env}/lasttime" || {
        chkerr "$FUNCNAME : cannot create lasttime (bc11da6)";
        fail="${fail} bc11da6"
    };
    mkdir -p "$k4db/0/pool";
    export k4_pool="$(k4db_pool)";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || k4db_new_pool;
    [ "$fail" = "fail" ] && return 0 || chkerr "$FUNCNAME : $fail (bd1faaa)"
}
k4db_k4_head_seq ()
{
    k4db_validate_k4 "$1" || return 1;
    export k4="$1";
    local k4d="${k4%/*}";
    local k4x="$(mktemp ${k4d}/__tmp.kdb-XXXX)";
    local kre order kinds="
# %ks # subject matter
# %kt # tag list
# %kk # entry keyord
# %kp # hier superord
# %kj # motive subord
# %kr # matrix reason
# %kl # like link
# %kv # value keys
# %kn # interval align
# %km # meta hash
# %ko # origin owner
# %kc # entry class
# %kd # file data
# %ki # review interval
# %ke # event begin
# %kz # event end
";
    kre="^($(echo "$kinds" | sed -e '/^$/d' | awk '{printf "%s",$2"|"}' | sed -e 's/|$//'))\\ ";
    order="$(echo "$kinds" | sed -e '/^$/d' | awk '{print $2}')";
    for kind in $order;
    do
        k4_headg "^${kind}\ " "$k4" >> "$k4x";
    done;
    k4_headv "$kre" "$k4" >> "$k4x";
    k4_body "$k4" >> "$k4x";
    [ -e "${k4},v" ] || ci -m"(by $FUNCNAME)" -l -t-kdb -q "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"(by $FUNCNAME)" -l -q "$k4";
    cat "$k4x" > "$k4";
    touch "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"(by $FUNCNAME)" -l -q "$k4";
    rm -i -f "$k4x"
}
k4db_keep_clean ()
{
    local _k4_env="$k4db/0/$k4_env";
    find "$k4db/0/$k4_env/k4db_clean" -type f -mtime -1 > /dev/null && return 0;
    k4db_clean &
}
k4db_linkcount ()
{
    local idxptr_NR="$(k4_count_idxptr)";
    local uidptr_NR="$(k4_count_uidptr)";
    local uidhln_NR="$(k4_count_uidhln)";
    local pools_NR="$(k4_count_pools)";
    local pooln_NR="$(k4_count_pooln)";
    k4_term_lines;
    k4_term_lines="$(( k4_term_lines - 5 ))";
    [ "$uidhln_NR" -gt "$k4_term_lines" ] && printf ">overflow_$((uidhln_NR - k4_term_lines))< : ";
    [ "$uidhln_NR" -eq 0 ] && printf ">null_match< : ";
    printf "%s/%s/%s/%s (id/ui/ln/lines) %s/$s (named/pools) %s" "$idxptr_NR" "$uidptr_NR" "$uidhln_NR" "$k4_term_lines" "$pooln_NR" "$pools_NR" "$*"
}
k4db_logstd ()
{
    echo "$*" | tai64n >> "${k4db}/0/,/log"
}
k4db_mk_idxptr ()
{
    local idx="$1" k4f="$2";
    [ "$3" ] && local k4_pool="$3" || k4_pool="$(k4db_pool)";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local idxf="$idxptr/$idx";
    k4db_validate_k4 "$k4" || return 1;
    set $(k4_headg '^%km ' "$k4f" | awk 'NR==1 {print}' | sed 's/_/ /g');
    [ "${#3}${#4}" = "88" ] || {
        chkerr "$FUNCNAME unexpected km 3 4 == '$xs $ss' k4f='$k4f' (d5b5c49)";
        return 1
    };
    expr "$3$4" : '^[[:xdigit:]]\{16\}$' > /dev/null || {
        chkerr "$FUNCNAME unexpected km 3 4 == '$3 $4' k4f='$k4f' (d5b5c58)";
        return 1
    };
    local uid="${3}${4}";
    printf '%s\n%s' "$k4f" "$3$4" > "$idxf";
    local val="$(k4_headg '^%kv ' "$k4f" |k4_arg 2)";
    expr "$val" : '^[[:xdigit:]]\{8\}$' > /dev/null || val="55c305f0";
    touch -t "$(xs2touch "$val")" "$idxf";
    ln -f "$idxf" "$uidptr/$uid";
    ln -f "$k4f" "$uidhln/$uid"
}
k4db_new_pool ()
{
    mkdir -p "$k4db/0/pool" || {
        chkerr "cannot make pool root '$k4db/0/pool' (d8bcdb0)";
        return 1
    };
    export k4_pool="pool/$(xss)";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    mkdir -p "$idxptr" "$uidptr" "$uidhln" "$poolenv" || {
        chkerr "cannot make pool dirs (d9bcdb0)";
        return 1
    }
}
k4db_pool ()
{
    [ -d "$k4db/0" ] || {
        chkerr "bad pool root '$k4db/0' (d8bd27f)";
        return 1
    };
    ls "$k4db/0/pool" | sed -e '/^[[:xdigit:]]\{16\}\^$/!d' -e 's/\^$//' -e 's=^=pool/=' | tail -n1
}
k4db_squash_defaults ()
{
    sed -E -e '
        /^%k. .*ord #$/d
        /^%k. .*def #$/d
        /^%k. .*root #$/d
        /^%kl .*link #$/d
        /^%kk .*# class define #$/d
        /^%kt $/d
        /^%k(l|r|p)_(%kl )5.* isbe #/d
        /^%k(l|r|p)_(%kl )5.* self #/d
        /^%k(l|r|p)_(%kl )5.* self [ ]*# (super|related)/d
        /^%k(l|r|p)_5.* self [ ]*# (super|related|linked)/d
        /^%kd_.*index.md$/d
        /^%kc  # class/d
        /^%kc  # hist class/d
        /^%kc blah/d
        /^%kc hist/d
        /^%kc hist # hist class/d
        /^%kc hist exam # class onto/d
        /^%kc hist exmp # class note/d
        /^%kc hist ignore # hist class/d
        '
}
k4db_trunc ()
{
    [ -t 1 ] && {
        local cols="$(tput cols)";
        awk -v cols="$((cols-1))" 'length > cols{$0=substr($0,0,cols)"_"}1'
    } || cat
}
k4db_valid_bg ()
{
    true
}
k4db_valid_cmd ()
{
    local cksum fail="fail";
    [ "$k4db" = "/Users/geo/dot4" ] || {
        chkerr "$FUNCNAME : unexpected k4db : $k4db : bc02189";
        fail="${fail} bc02189"
    };
    [ -d "$k4db/0/$k4_named" ] || {
        chkerr "$FUNCNAME : invalid k4_named : $k4_named (d4a0f44)";
        fail="${fail} d4a0f44"
    };
    [ -d "$k4db/0/$k4_env" ] || {
        chkerr "$FUNCNAME : invalid k4_env : $k4_env (d4a0f43)";
        fail="${fail} d4a0f43"
    };
    [ -d "$k4db/0/$k4_log" ] || {
        chkerr "$FUNCNAME : invalid k4_log : $k4_log (d4a0f42)";
        fail="${fail} d4a0f42"
    };
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "$FUNCNAME : invalid '$k4_pool'";
        fail="${fail} d8e96b2"
    };
    [ -e "$k4db/0/${k4_env}/nulltime" ] || {
        chkerr "$FUNCNAME : no nulltime : $k4_nulltime : bbfd346";
        fail="${fail} bbfd346"
    };
    [ -e "$k4db/0/${k4_env}/lasttime" ] || {
        chkerr "$FUNCNAME : no lasttime : $k4_lasttime : bbfd371";
        fail="${fail} bbfd371"
    };
    local cksum="$(k4_headg "${k4_search}" /Users/geo/dot4/5/c/4/e/1/a/^/^5c4e1a.kdb | cksum)";
    [ "$cksum" = "3868898699 403" ] || {
        chkerr "$FUNCNAME : failed k4_search cksum : c4e1a";
        fail="${fail} bbeec"
    };
    [ "$fail" = "fail" ] && return 0 || chkerr "$FUNCNAME : $fail";
    return 1
}
k4db_validate_functions ()
{
    {
        true && chkwrn "$FUNCNAME : no tests (d55c939)" && return 0
    } || {
        chkerr "$FUNCNAME : test fail (d55c93a)";
        return 1
    }
}
k4db_validate_k4 ()
{
    $k4db_fstart;
    local k4="$1";
    [ -f "$k4" ] || chkerr "$FUNCNAME : not a regular file k4='$k4' (bda5b1e)" || return 1;
    k4_headg "^%ks ." "$k4" > /dev/null || {
        chkerr "$FUNCNAME : Invalid k4 : no %ks : $k4";
        return 1
    };
    k4_headg "^%km ." "$k4" > /dev/null || {
        chkerr "$FUNCNAME : Invalid k4 : no %km : $k4";
        return 1
    };
    $k4db_fstop
}
k4db_xss_ddiff ()
{
    local v t0="${1}.0" t1="${1}.1";
    [ -e "$t0" -a -e "$t1" ] || {
        chkerr "$FUNCNAME $1 : Invalid input $t0 $t1 bc4dcae";
        return 1
    };
    shift;
    local pass="$*";
    set $(sed -e 's/_/ /' "$t1" "$t0"         | awk '{print  $1,$2}' | tr ' ' '\n'         | while read v ; do printf '%d\n' "0x$v" ; done         | tr '\n' ' ');
    dc -e "4k $1 $3 - $2 $4 - 1006632959 / + n";
    echo -n " $pass"
}
k4dir ()
{
    {
        k4dir_epoch_span | awk '{print $1}';
        echo $@
    } | k4_squeeze
}
k4dir_epoch_span ()
{
    local prefix="$1" _xss_="$2";
    shift 2;
    local pass=$@;
    [ "$prefix" ] || prefix="$k4db";
    [ -d "$prefix" ] || {
        chkerr "prefix='$prefix' not a directory (d1a0a1d)";
        return 1
    };
    [ -w "$prefix" ] || {
        chkerr "prefix='$prefix' not writeable (d1a19d5)";
        return 1
    };
    [ "$_xss_" ] || {
        set $(echo | tai64n | sed -e 's/^@4[0]*//' -e 's/.\{8\}/& /');
        _xss_="$1$2"
    };
    local result="/$_xss_";
    while [ -d "${prefix}${result%/*}" ]; do
        result="$(echo "$result" | sed -e 's:.*/.:&/:' -e 's://$:/f:' )";
    done;
    {
        echo "$prefix$result" | sed 's:[[:xdigit:]]*$:^:';
        echo "$result" | sed -e 's:/[^/]*$::' -e 's:[^[:xdigit:]]*::g';
        echo "$result" | sed 's:.*/::';
        echo "$pass"
    } | k4_squeeze
}
k4epoch ()
{
    {
        k4dir_epoch_span | awk '{print $2}';
        echo $@
    } | k4_squeeze
}
k4epochlist ()
{
    k4db_fk4 | sed -e "s,$k4db/,," -e "s,[^/]*/[^/]*$,,g" | tr -d '/' | sort -u
}
k4epochs ()
{
    local _epoch_ _epoch_4_ _epoch_32_;
    k4db_fk4 | sed -e "s,$k4db/,," -e "s,[^/]*/[^/]*$,,g" | tr -d '/' | sort -u | while read _epoch_; do
        [[ "$_epoch_" =~ ^[[:xdigit:]]+$ ]] && {
            _epoch_4_="$( base  4 "$((0x$_epoch_))")";
            _epoch_32_="$(base 32 "$((0x$_epoch_))")"
        } || {
            _epoch_4_='0';
            _epoch_32_='0'
        };
        printf "%-33s %-19s %-9s\n" "$_epoch_4_" "$_epoch_" "$_epoch_32_";
    done
}
k4epochspan ()
{
    {
        k4dir_epoch_span | awk '{print $2,$3}';
        echo $@
    } | k4_squeeze
}
k4k ()
{
    local uidln="$1" uidlnd="$k4db/pool/0/uidln";
    [ "$uidln" ] && k4kr "$uidln" || knkr "$1" || {
        ls "$uidlnd" | while read uidln; do
            k4kr "${uidlnd}/${uidln}";
        done
    }
}
k4kl ()
{
    k4kr $@ | sed 's/^%kr /%kl /'
}
k4kr ()
{
    local kl k4="$1";
    [ "$k4" ] || k4="$k4";
    k4db_validate_k4 "$k4" || return 1;
    kl="$( { k4_headg '^%kk\ ' "$k4" | k4db_squash_defaults | sed 's/^%kk /%kr /'
          k4_headg '^%ks ' "$k4" | sed 's/^%ks /%s /' ;} | k4_squeeze )";
    [ "$kl" ] || kl="$( k4_headg '^%km\ ' "$k4" | sed -e 's/_/ /g'               | awk '{printf "%s %s %s ","\%kr",$5,$6}'
            k4_headg '^%ks\ ' "$k4" | sed -e 's/^%ks /%s /' )";
    echo "$kl" | k4_squeeze
}
k4krm ()
{
    k4db_validate_k4 "$1" || return 1;
    local arg1="$1" k4="$2";
    local k4d="${k4%/*}";
    local k4x="$(mktemp ${k4d}/__tmp.kdb-XXXX)";
    k4_headv "$arg1" "$k4" >> "$k4x";
    k4_body "$k4" >> "$k4x";
    [ -e "${k4},v" ] || ci -m"(by $FUNCNAME)" -l -t-kdb -q "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"(by $FUNCNAME)" -l -q "$k4";
    cat "$k4x" > "$k4";
    touch "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"(by $FUNCNAME)" -l -q "$k4";
    rm -i -f "$k4x"
}
k4linemax ()
{
    [ "$1" ] && cols="$1" || cols=80;
    [ "$2" ] && char="$2" || char='#';
    awk -v cols="$cols" -v char="$char" 'length > cols{$0=substr($0,0,cols)char}1'
}
k4link ()
{
    k4_env_wlink $@;
    k4db_env_get_kl
}
k4nr2idx ()
{
    export k4doc_$FUNCNAME="per %d (arg1/stdin) return 4+ char of reverse base 3 with shifted 0";
    local a;
    [ "$1" ] && a="$1";
    [ "$1" ] || IFS= read a;
    base 3 $a | sed -e 's/2/3/g' -e 's/1/5/g' -e 's/0/4/g' | sed -e 's/^[4]*//' -e 's/^$/4/' | sed -e 's/^...$/ &/' -e 's/^..$/ & /' -e 's/^.$/  & /' -e 's/$/ /'
}
k4nr2idx_valid ()
{
    local a b;
    seq 0 242 | while IFS= read a; do
        k4nr2idx "$a";
    done | while IFS= read b; do
        echo "${b}xx";
    done
}
k4p ()
{
    find $k4db/$k4_pool -name =\* | sed 's/.*0//' | sort -d | column;
    echo $k4_pool | sed 's/.*0/0/'
}
k4pool_mkidxs ()
{
    [ "$k4_pool" ] || export k4_pool="$(k4db_pool)";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "Irregular pool (d8d2093)";
        return 1
    };
    local last="$poolenv/$FUNCNAME";
    local ptrf idx uid val k4f idx_uidptr;
    [ -e "$last" ] && {
        [ "$(find  "$idxptr" "$uidptr" "$uidhln" -newer "$last" >/dev/null)" ] || return 0
    } || true;
    find "$idxptr" -regex '.*/0/pool/[[:xdigit:]]\{16\}\^/[[:xdigit:]]*$' -delete;
    find "$uidhln" -regex '.*/0/pool/[[:xdigit:]]\{16\}%/[[:xdigit:]]\{16\}$' -delete;
    find "$uidptr" -regex '.*/0/pool/[[:xdigit:]]\{16\}=/[[:xdigit:]]\{16\}$' -type f | awk '{printf "%d %s\n",NR,$1}' | while read idx_uidptr; do
        set $idx_uidptr;
        ptrf="$2";
        k4f="$(awk 'NR==1 {print}' "$ptrf")";
        uid="$(awk 'END   {print}' "$ptrf")";
        idx="$(base 4 "$1")";
        val="$(k4_headg '^%kv ' "$k4f" | k4_arg 2)";
        expr "$val" : '^[[:xdigit:]]\{8\}$' > /dev/null || val="55c305f0";
        ln "$k4f" "$uidhln/$uid";
        [ -d "$uidhln/$uid" ] && chkwrn "$FUNCNAME "uidhln/$uid" is a directory (d8266fd.2)" && return 0;
        printf '%s\n%s' "$k4f" "$uid" > "$idxptr/$idx";
        touch -t "$(xs2touch "$val")" "$idxptr/$idx";
    done;
    find "$uidptr" -regex '.*/0/pool/[[:xdigit:]]\{16\}=/[[:xdigit:]]\{16\}$' -delete;
    find "$idxptr" -regex '.*/0/pool/[[:xdigit:]]\{16\}\^/[[:xdigit:]]*$' -type f | while read ptrf; do
        uid="$(awk 'END   {print}' "$ptrf")";
        ln -f "$ptrf" "$uidptr/$uid";
    done;
    touch $last
}
k4setxsss ()
{
    set $(echo | tai64n | sed -e 's/^@4[0]*//' -e 's/.\{8\}/& /');
    export xs="$1" ss="$2"
}
k4stat ()
{
    local f fs;
    [ "$1" ] && fs="$1" || fs="$(cat)";
    shift;
    [ "$1" ] && $FUNCNAME $@;
    [ "$fs" = "-h" -o "$fs" = "--help" ] && {
        chkwrn "Usage, for arg1 (or per line stdin)";
        chkwrn "return: n-inode chksum size mdate filename"
    } || {
        echo "$fs" | while IFS= read f; do
            [ -f "$f" ] && {
                {
                    stat -f '%l %i %z %m' "$f";
                    echo "$f"
                } | tr '\n' ' ' | awk '{printf "%x%07x . % 8x %08x %s\n",$1,$2,$3,$4,$5}'
            } || chkerr "$FUNCNAME : not a regular file : $f";
        done
    }
}
k4statsum ()
{
    local f fs;
    [ "$1" ] && fs="$1" || fs="$(cat)";
    shift;
    [ "$1" ] && $FUNCNAME $@;
    [ "$fs" = "-h" -o "$fs" = "--help" ] && {
        chkwrn "Usage, for arg1 (or per line stdin)";
        chkwrn "return: n-inode chksum size mdate filename"
    } || {
        echo "$fs" | while IFS= read f; do
            [ -f "$f" ] && {
                {
                    stat -f '%l %i %z %m' "$f";
                    cksum "$f"
                } | tr '\n' ' ' | awk '{printf "%x%07x %8x % 8x %8x %s\n",$1,$2,$5,$3,$4,$7}'
            } || chkerr "$FUNCNAME : not a regular file : $f";
        done
    }
}
k4vk4 ()
{
    [ "$1" = "help" ] && {
        cat  <<'help'
k4vk4 "$k4" "phu $FUNCNAME" # pre
k4vk4 "$k4" "epi $FUNCNAME" # main
k4vk4 "$k4" "pio $FUNCNAME" # post
k4vk4 "$k4" "sta $FUNCNAME" # misc
help

        return 0
    };
    k4db_validate_k4 "$1" || return 1;
    local k4="$1";
    shift;
    local pass="$0 $*";
    [ -e "${k4},v" ] || ci -m"(k4vk4 $k4 $pass)" -l -t-kdb -q "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"($pass)" -l -q "$k4"
}
k4words ()
{
    tr -c '[:alpha:]' ' ' | tr ' ' '\n' | tr '[:upper:]' '[:lower:]' | sort -r | uniq -c | aspell -l en munch-list | sort -n | sed -e 's=/.*==' -e 's/.* //' | while read w; do
        {
            grep -iEq "(^|\ )${w}(\ |$)" "$k4db_ntag" || echo "$w"
        };
    done
}
k_ ()
{
    local day="$1";
    $k4db_logstd "begin $$ : k4since='$k4since' $FUNCNAME $day";
    [ "$day" ] || day=3;
    local k4since;
    k4since="-mtime -${day}" kj .;
    $k4db_logstd "end $$ : k4since='$k4since' $FUNCNAME $day"
}
k__ ()
{
    local min="$1";
    $k4db_logstd "begin $$ : k4since='$k4since' $FUNCNAME $min";
    [ "$min" ] || min=90;
    local k4since;
    k4since="-mmin -${min}" kj .;
    $k4db_logstd "end $$ : k4since='$k4since' $FUNCNAME $arg"
}
ka ()
{
    $k4db_logstd "start $$ : $FUNCNAME $*";
    set $(k4db_in "$1" 1);
    k4db_validate_k4 "$1" || return 1;
    export k4="$1";
    aspell -c "$k4";
    [ -e "${k4},v" ] || ci -m"(by $FUNCNAME)" -l -t-kdb -m'ka (aspell)' -q "$k4";
    [ "${k4}" -nt "${k4},v" ] && ci -m"(by $FUNCNAME)" -l -q "$k4";
    k4_inventory "$k4";
    $k4db_logstd "end $$ : $FUNCNAME $*"
}
kcat ()
{
    $k4db_logstd "start $$ : $FUNCNAME $@";
    set $(k4db_in "$1");
    k4db_validate_k4 "$1" || return 1;
    export k4="$1";
    [ -t 1 ] && {
        k4db_hl '=';
        k4db_hl '~';
        k4_headg "." "$k4" | k4db_squash_defaults;
        k4_body "$k4";
        k4db_hl '~';
        k4db_hl '\';
        k4_headg "$k4_topic" "$k4";
        k4_inventory "$k4";
        k4db_hl '/'
    };
    [ -t 1 ] || cat "$k4";
    $k4db_logstd "end $$ : $FUNCNAME $@"
}
kcon ()
{
    local kk="$1";
    local uidhln="$k4db/0/${k4_pool}/%";
    local k4 k4d k4x;
    [ "$kk" ] || chkwrn "$FUNCNAME noop null arg1 : d9c193e";
    [ "$kk" ] && {
        ls "$uidhln" | while IFS= read uid; do
            k4="$uidhln/$uid";
            k4db_validate_k4 "$k4" && {
                k4vk4 "$k4" "phu $FUNCNAME";
                k4d="${k4%/*}";
                k4x="$(mktemp ${k4d}/__tmp.kdb-XXXX)";
                echo "$kk" >> "$k4x";
                k4_headg "." "$k4" >> "$k4x";
                k4_body "$k4" >> "$k4x";
                mv -i -f "$k4x" "$k4";
                k4vk4 "$k4" "epi $FUNCNAME";
                k4db_k4_head_seq "$k4";
                k4vk4 "$k4" "pio $FUNCNAME"
            } || {
                chkwrn "$FUNCNAME k4 invalid : $k4 : d9ba364"
            };
        done
    }
}
kdel ()
{
    $k4db_fstart;
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    set $(k4db_in "$1");
    local k4="$1" uid="$2" idx="$3";
    k4db_validate_k4 "$k4" || return 1;
    local k4d="${k4%/*}";
    k4_valid_dir "$k4d" || {
        chkerr "$FUNCNAME error (d2ec9d0)";
        return 1
    };
    local a;
    k4db_hl '=';
    k4db_hl '~';
    k4_body "$k4";
    k4db_hl '~';
    k4db_hl '\';
    k4_headv "$k4_topic" "$k4";
    k4db_hl '.';
    k4_headg "$k4_topic" "$k4";
    k4_inventory "$k4";
    k4db_hl '/';
    chkwrn "DELETE $k4d/";
    read -n1 -p "(y/N) " a;
    echo;
    [ "$a" = "y" ] && {
        find "$uidhln" -samefile "$k4" -delete;
        find "$uidptr" "$idxptr" -samefile "$uidptr/$uid" -delete;
        rm -i -rf "$k4d/"
    } || chkwrn "$FUNCNAME : cancled"
}
kg ()
{
    k4db_valid_cmd || chkerr "$FUNCNAME : fail k4db_valid_cmd bc73b10 " || return 1;
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3923)";
        return 1
    };
    local uid ptr uidhlnf;
    local xs filter="$1" k4ex="$2";
    local k4_topic k4_search="$k4_search";
    [ "$k4ex" ] && {
        k4_topic="$k4ex" k4_search="$k4ex"
    } || k4_topic="^%ks ";
    k4db_hl '~';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    find "$uidhln" -type f | while read uidhlnf; do
        uid="${uidhlnf##*/}";
        k4_headg "$k4_search" "$uidhlnf" | grep $k4case -qE "$filter" && {
            idxptrf="$(grep --files-with-matches "$uid" "$idxptr/"* | awk 'NR==1 {print}' )";
            id="$(printf '% 4s' "${idxptrf##*/}")";
            xs="${uid::8}";
            k4_headg "$k4_topic" "$uidhln/$uid" | awk -v id="$id" -v xs="$xs" 'NR==1{sub(/^/,id" "xs" ")}1' | sed -e "s/^%/             %/" | $k4_unlong
        } || {
            idxptrf="$(grep --files-with-matches "y $uid" "$idxptr/"* | awk 'NR==1 {print}' )";
            rm -i -f "$uidptr/$uid";
            rm -i -f "$uidhln/$uid"
        };
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": $FUNCNAME '${filter}' : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
kgl ()
{
    k4_search='^%k(s|m|t|j) ' kg $@
}
kgm ()
{
    k4_search='^%km ' kg $@
}
kgn ()
{
    return 1
}
kgs ()
{
    k4_search='^%ks ' kg $@
}
kgt ()
{
    k4_search='^%kt ' kg $@
}
kh ()
{
    $k4db_logstd "start $$ : $FUNCNAME $@";
    set $(k4db_in "$1" 1);
    k4db_validate_k4 "$1" || return 1;
    export k4="$1";
    [ -t 1 ] && {
        k4db_hl '~';
        k4_headg "." "$k4" | k4db_squash_defaults;
        k4db_hl '~'
    };
    [ -t 1 ] || k4_headg "." "$k4";
    $k4db_logstd "end $$ : $FUNCNAME $@"
}
kin ()
{
    kk4 $(k4db_in $1 1)
}
kinv ()
{
    k4_inventory "$(k4db_in "$1" 1)"
}
kj ()
{
    $k4db_logstd "begin $$ : k4since='$k4since' $FUNCNAME $arg";
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    [ "$#" = 0 ] && {
        k4_help;
        return 1
    };
    k4db_valid_cmd || chkerr "$FUNCNAME : fail k4db_valid_cmd d3dde99" || return 1;
    k4db_new_pool;
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    local k4 no nx xs filter;
    k4_term_lines;
    expr "$*" : '^(.*)$' > /dev/null && filter="$*" || {
        [ "$#" -gt 0 ] && filter="$(echo -n '('
                while [ $# -ne 0 ] ; do
                  echo -n "$1" ; shift ; [ $# -ne 0 ] && echo -n '|'
                  done ; echo ')' )"
    };
    local n4 nd=0;
    k4db_hl '\';
    k4db_fk4 | while read k4; do
        k4_headg "$k4_search" "$k4" | grep "$k4case" -qE "$filter" && {
            nd="$(( nd + 1 ))";
            n4="$(base 4 "$nd")";
            k4db_mk_idxptr "$n4" "$k4";
            k4db_idxptr_ks "$n4" "$nd"
        };
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": k4since='$k4since' $FUNCNAME '$filter' : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong;
    $k4db_logstd "end $$ : k4since='$k4since' $FUNCNAME $arg"
}
kjt ()
{
    k4_search="^%kt " kj $@
}
kk4 ()
{
    local filter inid="$2";
    [ "$inid" ] || inid="$1";
    [ "$inid" ] || inid=0;
    set $(k4db_in "$inid") || return 1;
    local k4="$1";
    k4db_validate_k4 "$k4" || return 1;
    k4_headg '^%kk\ ' "$k4" | sed 's/^%kk / %k /' && return 0;
    {
        k4_headg '^%k(s|t)\ ' "$k4";
        k4_headg '^%km\ ' "$k4" | sed -e 's/_/ /g' | awk '{printf " %%k %s",$5}' | tr '\n' ' ';
        echo
    };
    [ "$inid" ] && filter="$1";
    [ "$filter" ] || filter='(^%ks|^%kt|^%kk|^%kj|^%kp)';
    k4_headg "$filter" "$k4" | k4db_squash_defaults | tr '\n' ' ';
    echo
}
kkrrr_kv ()
{
    cat  <<eof
ultimate numerator xor (per common era, 1970, kdb epoch, entry epoch)
    read %kv v ....
    recalculate %kv v c
    replace %kv v c
eof

}
kl ()
{
    local ex="$1";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3923)";
        return 1
    };
    k4db_hl '\';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    k4pool_mkidxs;
    ls "$uidhln" | while read uid; do
        id="$(grep --files-with-matches "$uid" "$idxptr"/* | awk 'NR==1 {print}' )";
        id="${id##*/}";
        xs="${uid::8}";
        chkerr "rm first try of color d8d507b";
        return 1;
        [ "$ex" ] && {
            printf '%-4s %s ' "$id" "$xs";
            printf '%s\r' "${xs}";
            k4_headg "$ex" "$uidhln/$uid" | k4db_squash_defaults | awk -v xs="$xs" '{printf "\033[12C%s %s\n","",$0}'
        } || {
            printf '%4s %s ' "$id" "$xs";
            k4_headg '^%ks ' "$uidhln/$uid" | awk 'NR==1 {print}'
        } | $k4_unlong;
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": $FUNCNAME $@ {sort acquisi} : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
kll ()
{
    kl "$k4_topic"
}
klll ()
{
    kl "$k4_search"
}
klr ()
{
    local ex="$1";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3933)";
        return 1
    };
    k4db_hl '\';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    k4pool_mkidxs;
    ls -r "$uidhln" | while read uid; do
        id="$(grep --files-with-matches "$uid" "$idxptr"/* | awk 'NR==1 {print}' )";
        id="${id##*/}";
        xs="${uid::8}";
        bg="$(k4_headg "^%km " "$uidhln/$uid" | tr '_' ' ' | awk 'NR==1 {print $2}')";
        expr "$bg" : '^[[:xdigit:]]\{8\}$' > /dev/null || bg="$(k4_headg "^%km " "$uidhln/$uid" | tr '_' ' ' | awk 'NR==1 {print $3}')";
        bg="$(printf "%06x\n" "$(( 0x${bg} % 0xffffff ))")";
        fg="bg xor nulltime xor color";
        [ "$ex" ] && {
            printf '%-4s %s ' "$id" "$xs";
            printf '%s\r' "${xs}";
            k4_headg "$ex" "$uidhln/$uid" | k4db_squash_defaults | awk -v xs="$xs" '{printf "\033[12C%s %s\n","",$0}'
        } || {
            printf '%4s %s ' "$id" "$xs";
            k4_headg '^%ks ' "$uidhln/$uid" | awk 'NR==1 {print}'
        } | $k4_unlong;
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": $FUNCNAME $@ {sort rev-acquisi} : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
klrl ()
{
    klr "$k4_topic"
}
klrll ()
{
    klr "$k4_search"
}
klv ()
{
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3923)";
        return 1
    };
    local ex="$1";
    local idx='' xx='';
    local onc='' ond='' noc='';
    k4db_hl '\';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    k4pool_mkidxs;
    [ -t 1 ] && {
        local pooln="$(ls "$uidptr" | awk 'END{print NR}')";
        local lines="$(tput li)";
        local cols="$(tput cols)"
    };
    ls -tr "$uidptr" | while read uid; do
        idx="$(grep --files-with-matches "$uid" "$idxptr"/* | awk 'NR==1 {print}' )";
        idx="${idx##*/}";
        xx="$(k4_headg "^%kv " "$uidhln/$uid" | awk 'NR==1 {print}' | k4_arg 2 )";
        expr "$xx" : '^[[:xdigit:]]$' > /dev/null || xx="55c305f0";
        {
            k4_headg "^%ks\ " "$uidhln/$uid" | awk -v idx="$idx" -v xx="$xx" '{printf "%4s %s %s\n",idx,xx,$0}';
            k4_headg "$ex" "$uidhln/$uid" | sed -e '/^%ks /d' -e 's/^/      /'
        } | k4linemax "$cols" | {
            [ "$line" -gt "$lines" ] && k4color $line $lines || cat
        };
        line="$((line - 1))";
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": $FUNCNAME $@ {sort value} : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
klvl ()
{
    klv "$k4_topic"
}
klvll ()
{
    klv "$k4_search"
}
klvr ()
{
    local ex="$1";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3923)";
        return 1
    };
    local xx uid id;
    k4db_hl '\';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    k4pool_mkidxs;
    ls -t "$uidptr" | while read uid; do
        id="$(grep --files-with-matches "$uid" "$idxptr"/* | awk 'NR==1 {print}' )";
        id="${id##*/}";
        xx="$(k4_headg "^%kv " "$uidhln/$uid" | awk 'NR==1 {print}' | k4_arg 2 )";
        [ "$xx" ] || xx='........';
        [ "$ex" ] && {
            printf '%-4s %s ' "$id" "$xx";
            printf '%s\r' "${xx}";
            k4_headg "$ex" "$uidhln/$uid" | k4db_squash_defaults | awk '{printf "\033[12C%s %s\n","",$0}'
        } || {
            printf '%4s %s ' "$id" "$xx";
            k4_headg '^%ks ' "$uidhln/$uid" | awk 'NR==1 {print}'
        } | $k4_unlong;
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": $FUNCNAME $@ {sort rev-acquisi} : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
klvrl ()
{
    klvr "$k4_topic"
}
klvrll ()
{
    klvr "$k4_search"
}
kn ()
{
    return 1
}
krst ()
{
    k4db_valid_cmd || chkerr "$FUNCNAME : fail k4db_valid_cmd 3ddeb8" || return 1;
    find "$k4db/0/pool" -depth -regex "$k4db/0/pool/[[:xdigit:]]\{16\}[/]*.*$" -delete;
    find "$k4db/0/pool" -depth -regex "$k4db/0/pool/@[/]*.*$" -delete;
    k4db_hl '=';
    find "$k4db/0/pool";
    k4db_hl '~';
    k4_list_tags;
    k4db_hl '.';
    k4_list_kc;
    k4db_hl '=';
    export k4since='';
    expr "$*" : '^(.*)$' > /dev/null && kj "$*" || {
        [ "$#" -gt 0 ] && kj $(echo -n '('
                    while [ $# -ne 0 ] ; do
                        echo -n "$1" ; shift ; [ $# -ne 0 ] && echo -n '|'
                        done ; echo ')' )
    }
}
ks ()
{
    local invoke="$FUNCNAME $*";
    $k4db_logstd "begin $$ : $invoke";
    local ks="$*";
    k4setxsss;
    set $(k4db_dir_km $xs $ss);
    local kd="$1" xa="$2" xs="$3" ss="$4" epoch="$5" pw="$6" k4hash="$7" k4span32="$8" hdate="$9";
    export k4="$kd/_${k4hash}.kdb";
    local k4x="$(mktemp "${kd}/__k4x-XXXX")";
    shift;
    local km="$*";
    echo "%ks $ks" >> "$k4x";
    echo "%kt " >> "$k4x";
    echo "%kk $epoch $pw $k4hash # class define #" >> "$k4x";
    echo "%kr $epoch $pw $k4hash # matrix root #" >> "$k4x";
    echo "%kp $epoch $pw $k4hash # hier superord #" >> "$k4x";
    echo "%kj $epoch $pw $k4hash # motive subord #" >> "$k4x";
    echo "%kl $epoch $pw $k4hash # like link #" >> "$k4x";
    k4db_env_get_kl >> "$k4x";
    echo "%km $km" >> "$k4x";
    echo "%kn $(nevernowf $xs) %d $(nevernowd $xs) %x $(nevernowx $xs)" >> "$k4x";
    local vc='00be';
    local v="$(dc -e "$((0x$xs)) 2 / $((0x$xs)) v v + $(xn2float "$vc") * p" | awk '{printf "%08x",$1}')";
    printf "%%kv %08x %s %s # value key #\n" "0x$v" "$vc" "0" >> "$k4x";
    local ki="$(k4db_addxd $xs $((86400 * 57)) )";
    local kiht="$(date -j -r 0x$ki "$k4_ht_strftime")";
    echo "%ki $ki $kiht # review interval" >> "$k4x";
    local e="$(printf '%x' "$(( $((0x$xs)) - 86400 * 18 ))" )";
    echo "%ke $e # event begin" >> "$k4x";
    echo "%kz $xs # event end" >> "$k4x";
    [ -e "$k4" ] && k4_headg . "$k4" >> "$k4x";
    printf "\n\n# $ks\n\n" >> "$k4x";
    [ -e "$k4" ] && k4_body . "$k4" >> "$k4x";
    k4vk4 "$k4" "phu $FUNCNAME";
    mv -i "$k4x" "$k4";
    k4db_k4_head_seq "$k4";
    k4vk4 "$k4" "epi $FUNCNAME";
    k4db_validate_k4 "$k4" || return 1;
    k4db_mk_idxptr "$xs" "$k4";
    k "$xs";
    k4_wpool_env "$k4";
    k4db_idx "$k4";
    $k4db_logstd "end $$ : $invoke"
}
ksynopsys ()
{
    local k4="$(k4db_in "$1" | k4_arg 1 )";
    k4_headg "$k4_topic" "$k4";
    k4_inventory "$k4"
}
kt ()
{
    local ex="$1";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3923)";
        return 1
    };
    k4db_hl '\';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    k4pool_mkidxs;
    ls -tr "$uidhln" | while read uid; do
        id="$(grep --files-with-matches "$uid" "$idxptr"/* | awk 'NR==1 {print}' )";
        id="${id##*/}";
        xs="${uid::8}";
        bg="$(k4_headg "^%km " "$uidhln/$uid" | tr '_' ' ' | awk 'NR==1 {print $2}')";
        expr "$bg" : '^[[:xdigit:]]\{8\}$' > /dev/null || bg="$(k4_headg "^%km " "$uidhln/$uid" | tr '_' ' ' | awk 'NR==1 {print $3}')";
        bg="$(printf "%06x\n" "$(( 0x${bg} % 0xffffff ))")";
        fg="bg xor nulltime xor color";
        [ "$ex" ] && {
            printf '%-4s %s ' "$id" "$xs";
            printf '%s\r' "${xs}";
            k4_headg "$ex" "$uidhln/$uid" | k4db_squash_defaults | awk -v xs="$xs" '{printf "\033[12C%s %s\n","",$0}'
        } || {
            printf '%4s %s ' "$id" "$xs";
            k4_headg '^%ks ' "$uidhln/$uid" | awk 'NR==1 {print}'
        } | $k4_unlong;
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": $FUNCNAME $@ {sort mod} : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
ktl ()
{
    kt "$k4_topic"
}
ktll ()
{
    kt "$k4_search"
}
ktr ()
{
    local ex="$1";
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3923)";
        return 1
    };
    k4db_hl '\';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    k4pool_mkidxs;
    ls -t "$uidhln" | while read uid; do
        id="$(grep --files-with-matches "$uid" "$idxptr"/* | awk 'NR==1 {print}' )";
        id="${id##*/}";
        xs="${uid::8}";
        bg="$(k4_headg "^%km " "$uidhln/$uid" | tr '_' ' ' | awk 'NR==1 {print $2}')";
        expr "$bg" : '^[[:xdigit:]]\{8\}$' > /dev/null || bg="$(k4_headg "^%km " "$uidhln/$uid" | tr '_' ' ' | awk 'NR==1 {print $3}')";
        bg="$(printf "%06x\n" "$(( 0x${bg} % 0xffffff ))")";
        fg="bg xor nulltime xor color";
        [ "$ex" ] && {
            printf '%-4s %s ' "$id" "$xs";
            printf '%s\r' "${xs}";
            k4_headg "$ex" "$uidhln/$uid" | k4db_squash_defaults | awk -v xs="$xs" '{printf "\033[12C%s %s\n","",$0}'
        } || {
            printf '%4s %s ' "$id" "$xs";
            k4_headg '^%ks ' "$uidhln/$uid" | awk 'NR==1 {print}'
        } | $k4_unlong;
    done;
    k4db_hl '/';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": $FUNCNAME $@ {sort rev-mod} : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
ktrl ()
{
    ktr "$k4_topic"
}
ktrll ()
{
    ktr "$k4_search"
}
kv ()
{
    local idxptr="$k4db/0/${k4_pool}/^";
    local uidptr="$k4db/0/${k4_pool}/=";
    local uidhln="$k4db/0/${k4_pool}/%";
    local poolenv="$k4db/0/${k4_pool}/_";
    [ -d "$idxptr" -a -d "$uidptr" -a -d "$uidhln" -a -d "$poolenv" ] || {
        chkerr "pool expected... k4db_new_pool? (d8c3923)";
        return 1
    };
    k4db_valid_cmd || chkerr "$FUNCNAME : fail k4db_valid_cmd bc73b10 " || return 1;
    local uidln uid filter;
    expr "$*" : '^(.*)$' > /dev/null && filter="$*" || {
        [ "$#" -gt 0 ] && filter="$(echo -n '('
                while [ $# -ne 0 ] ; do
                  echo -n "$1" ; shift ; [ $# -ne 0 ] && echo -n '|'
                  done ; echo ')' )"
    };
    local k4_topic='^%ks ';
    k4db_hl '~';
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.0";
    find "$uidhln" -regex '.*/uidhln/[[:xdigit:]]\{16\}$' -type f | while read uidhlnf; do
        k4_headg "$k4_search" "$uidhlnf" | grep $k4case -qE "$filter" && {
            uid="${uidhlnf##*/}";
            find "$uidptr" "$idxptr" -samefile "$uidptr/$uid" -delete;
            rm -i -f "$uidhlnf"
        } || {
            uid="${uidhlnf##*/}";
            uidptrf="$uidptr/$uid";
            idxptrf="$(find "$idxptr" -samefile "$uidptrf")";
            id="$(printf '% 4s' "${idxptrf##*/}")";
            xs="${uid::8}";
            printf '%s %s %s' "$id" "$xs" "$(k4_headg '^%ks ' "$uidhlnf" | awk 'NR==1 {print}')" | $k4_unlong
        };
    done;
    xssdaysec > "${poolenv}/tx.${FUNCNAME}.1";
    [ -t 1 ] && {
        k4epoch ":";
        k4db_linkcount ": k4since='$k4since' $FUNCNAME '${filter}' : ";
        k4db_xss_ddiff "${poolenv}/tx.${FUNCNAME}" seconds
    } | k4_squeeze | tee -a "$k4db/0/$k4_log/${FUNCNAME}.log" | $k4_unlong
}
kvl ()
{
    k4_search='^%k(s|m|t|j) ' kv $@
}
kvm ()
{
    k4_search='^%km ' kv $@
}
kvn ()
{
    return 1
}
kvs ()
{
    k4_search='^%ks ' kv $@
}
kvt ()
{
    k4_search='^%kt ' kv $@
}
nevernowd ()
{
    local i xs="$1" dxs="$(( 0x$xs ))";
    local ke=1438844400 day=86400 is="6 7 9 12 14 16 18 24 28 32 38 43 57 63 86 194";
    local dxs="$(( dxs - day ))";
    for i in $is;
    do
        printf '%02d/%02d ' "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" "$i";
    done
}
nevernowf ()
{
    local i xs="$1";
    local dxs="$(( 0x${xs} - day ))";
    local ke=1438844400 day=86400 is="6 7 9 12 14 16 18 24 28 32 38 43 57 63 86";
    local ke=1438844400 day=86400 is="6 7 9 12 14";
    for i in $is;
    do
        {
            base 4 "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" | awk '{printf "%02s",$1}';
            echo "f";
            base 4 "$i" | awk '{printf "%02s",$1}'
        } | tr -d '\n';
        echo -n ' ';
    done;
    local ke=1438844400 day=86400 is="             16 18 24 28 32 38 43 57 63 86 194";
    for i in $is;
    do
        {
            base 18 "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" | awk '{printf "%02s",$1}';
            echo h;
            base 18 "$i" 4 | awk '{printf "%02s",$1}'
        } | tr -d '\n';
        echo -n ' ';
    done
}
nevernowh ()
{
    local i xs="$1";
    local dxs="$(( 0x${xs} - day ))";
    local ke=1438844400 day=86400 is="6 7 9 12 14 16 18 24 28 32 38 43 57 63 86 194";
    for i in $is;
    do
        {
            base 18 "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" | awk '{printf "%02s",$1}';
            echo h;
            base 18 "$i" | awk '{printf "%02s",$1}'
        } | tr -d '\n';
        echo -n ' ';
    done
}
nevernowo ()
{
    local i;
    local xs="$(xs)";
    local dxs="$(printf %d "0x$xs")";
    local i xs="$1" dxs="$(( 0x$xs ))";
    local ke=1438844400 day=86400 is="6 7 9 12 14 16 18 24 28 32 38 43 57";
    local dxs="$(( dxs - day ))";
    for i in $is;
    do
        printf '%02oo%02o ' "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" "$i";
    done;
    echo
}
nevernowx ()
{
    local i;
    local xs="$(xs)";
    local dxs="$(printf %d "0x$xs")";
    local ke=1438844400 day=86400 is="6 7 9 12 14 16 18 24 28 32 38 43 57 63 86 194";
    local dxs="$(( dxs - day ))";
    for i in $is;
    do
        printf '%02xx%02x ' "$(( ( ($dxs - $ke ) % ( $i * $day ) ) / $day + 1  ))" "$i";
    done
}
ptr ()
{
    rev="$(echo "$1" | cut -d\. -f1).$2";
    ip="$(echo "$1" | cut -d\. -f2-)";
    [ "$ip" = "$1" ] && echo "${rev}" || ptr $ip $rev
}
ptr_arpa ()
{
    [ -z "$1" ] && echo -n "An ip address on the command line returns its ";
    echo "$(ptr "$1")in-addr.arpa"
}
rdot4 ()
{
    ptr $(echo space.dot4.$@ | tr '\t\ ' '.') | tr '.' '\ '
}
rev ()
{
    local in="${*}^" x1i x1o x2o ot;
    [ "$in" = "^" ] && in="$(cat)^";
    [ -z "$(ecp "1" "$in")" ] && {
        ecp "2-" "$in";
        return 0
    };
    x1a="$(rev_ecc "2-" "$in" )";
    x1b="$(rev_ecc "1"  "$in" )";
    x2o="$(rev_ecp "2-" "$in" )";
    ot="${x1a}^${x1b}${x2o}";
    $FUNCNAME "$ot"
}
rev_ecc ()
{
    echo "$2" | cut -c "$1" | sed 's/\^.*//g'
}
rev_ecp ()
{
    echo "$2" | cut -d '^' -f "$1" | sed 's/\^.*//g'
}
revbyte ()
{
    return 1
}
revline ()
{
    return 1
}
revword ()
{
    return 1
}
stderr ()
{
    echo ">>> $* <<<" 1>&2
}
stdwrn ()
{
    echo "^^^ $* ^^^" 1>&2
}
vk4db_env ()
{
    return 1
}
vk4db_head ()
{
    return 1
}
vk4db_headx ()
{
    return 1
}
vk4db_km ()
{
    return 1
}
xn2float ()
{
    local xn="$1";
    expr "$xn" : '^[[:xdigit:]]*$' > /dev/null || {
        echo 1;
        return 1
    };
    k="${#xn}";
    xd="$(printf "%*s" $k '' | tr ' ' "f")";
    k="$(( ( 16 * k ) / 10 ))";
    dc -e "$k k $((0x$xn)) $((0x$xd)) / p"
}
xs ()
{
    xss | sed -e 's/.\{9\}$//'
}
xs2local ()
{
    local id="$1";
    [ "$id" ] || id="$(cat)";
    echo "$id" | xs2tai | tai64nlocal | sed 's/[\.|][0]*$//'
}
xs2s ()
{
    local xs="$1";
    [ "$xs" ] || xs="$(cat)";
    echo "$xs" | while read n; do
        printf "%d\n" "0x$n";
    done
}
xs2tai ()
{
    sed -e 's/^/@40000000/' -e 's/$/00000000/'
}
xs2touch ()
{
    local id="$1";
    [ "$id" ] || id="$(cat)";
    echo "$id" | xs2tai | tai64nlocal | sed 's/[\.|][0]*$//' | tr -d ': -' | sed 's/..$/\.&/'
}
xss ()
{
    echo | tai64n | sed -e 's/^@4[0]*//' -e 's/ $//'
}
xssdaysec ()
{
    date "+%Y%m%d %H:%M:%S:%a:%s" | tai64n | sed -e "s/^@4[0]*//" -e 's/^[[:xdigit:]]\{8\}/&_/'
}
